{"ast":null,"code":"/*!\n * Chart.js v4.4.8\n * https://www.chartjs.org\n * (c) 2025 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n\n    this._running = true;\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  _update() {\n    let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n\n        this._notify(chart, anims, date, 'complete');\n\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n\n    return anims;\n  }\n\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n\n    this._getAnims(chart).items.push(...items);\n  }\n\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  start(chart) {\n    const anims = this._charts.get(chart);\n\n    if (!anims) {\n      return;\n    }\n\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n\n    const anims = this._charts.get(chart);\n\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n\n    return true;\n  }\n\n  stop(chart) {\n    const anims = this._charts.get(chart);\n\n    if (!anims || !anims.items.length) {\n      return;\n    }\n\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n\n    anims.items = [];\n\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n\n}\n\nvar animator = /* #__PURE__ */new Animator();\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n\n  color(from, to, factor) {\n    const c0 = color(from || transparent);\n    const c1 = c0.valid && color(to || transparent);\n    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n  },\n\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n\n};\n\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      this.tick(Date.now());\n      this._active = false;\n\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n    this._active = from !== to && (loop || elapsed < duration);\n\n    if (!this._active) {\n      this._target[prop] = to;\n\n      this._notify(true);\n\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = elapsed / duration % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({\n        res,\n        rej\n      });\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n\n}\n\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n\n      if (!isObject(cfg)) {\n        return;\n      }\n\n      const resolved = {};\n\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach(prop => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {});\n    }\n\n    return animations;\n  }\n\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n\n    return animations;\n  }\n\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n\n  let options = target.options;\n\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {\n      $shared: false,\n      $animations: {}\n    });\n  }\n\n  return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  let found = false;\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n\n    if (datasetIndex === dsIndex) {\n      found = true;\n\n      if (options.all) {\n        continue;\n      }\n\n      break;\n    }\n\n    otherValue = stack.values[datasetIndex];\n\n    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n      value += otherValue;\n    }\n  }\n\n  if (!found && !options.all) {\n    return 0;\n  }\n\n  return value;\n}\n\nfunction convertObjectDataToArray(data, meta) {\n  const {\n    iScale,\n    vScale\n  } = meta;\n  const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n  const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      [iAxisKey]: key,\n      [vAxisKey]: data[key]\n    };\n  }\n\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || stacked === undefined && meta.stack !== undefined;\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n\n    if (positive && value > 0 || !positive && value < 0) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {\n    chart,\n    _cachedMeta: meta\n  } = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {\n    iScale,\n    vScale,\n    index: datasetIndex\n  } = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {\n      [iAxis]: index,\n      [vAxis]: value\n    } = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent, {\n    active: false,\n    dataset: undefined,\n    datasetIndex: index,\n    index,\n    mode: 'default',\n    type: 'dataset'\n  });\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n\n    delete stacks[axis][datasetIndex];\n\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = mode => mode === 'reset' || mode === 'none';\n\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\n\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {\n  keys: getSortedDatasetIndices(chart, true),\n  values: null\n};\n\nclass DatasetController {\n  static defaults = {};\n  static datasetElementType = null;\n  static dataElementType = null;\n\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale ? meta.vScale : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  _destroy() {\n    const meta = this._cachedMeta;\n\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    if (isObject(data)) {\n      const meta = this._cachedMeta;\n      this._data = convertObjectDataToArray(data, meta);\n    } else if (_data !== data) {\n      if (_data) {\n        unlistenArrayEvents(_data, this);\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    this._resyncElements(resetNewElements);\n\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n      meta._stacked = isStacked(meta.vScale, meta);\n    }\n  }\n\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  parse(start, count) {\n    const {\n      _cachedMeta: meta,\n      _data: data\n    } = this;\n    const {\n      iScale,\n      _stacked\n    } = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n\n          prev = cur;\n        }\n      }\n\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  parsePrimitiveData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n\n    return parsed;\n  }\n\n  parseArrayData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n\n    return parsed;\n  }\n\n  parseObjectData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n\n    return parsed;\n  }\n\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {\n      mode\n    });\n  }\n\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n\n    const otherScale = this._getOtherScale(scale);\n\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    const {\n      min: otherMin,\n      max: otherMax\n    } = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n\n      if (sorted) {\n        break;\n      }\n    }\n\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n\n      if (isNumberFinite(value)) {\n        values.push(value);\n      }\n    }\n\n    return values;\n  }\n\n  getMaxOverflow() {\n    return false;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  update(mode) {}\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || elements.length - start;\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n\n      if (element.hidden) {\n        continue;\n      }\n\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  _resolveElementOptions(elementType) {\n    let mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n    let index = arguments.length > 2 ? arguments[2] : undefined;\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n\n    const context = () => this.getContext(index, active, mode);\n\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n\n    if (cached) {\n      return cached;\n    }\n\n    let options;\n\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n\n    const animations = new Animations(chart, options && options.animations);\n\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {\n      sharedOptions,\n      includeOptions\n    };\n  }\n\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: !active && this.getSharedOptions(options) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n\n    this._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  _insertElements(start, count) {\n    let resetNewElements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = arr => {\n      arr.length += count;\n\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {}\n\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n\n    meta.data.splice(start, count);\n  }\n\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n\n    const newCount = arguments.length - 2;\n\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n\n}\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n\n  return scale._cache.$bar;\n}\n\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - size / 2\n  };\n}\n\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n\n  return {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  };\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {\n      top: true,\n      right: true,\n      bottom: true,\n      left: true\n    };\n    return;\n  }\n\n  const {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  } = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, _ref, ratio) {\n  let {\n    inflateAmount\n  } = _ref;\n  properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\n\nclass BarController extends DatasetController {\n  static id = 'bar';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true\n      }\n    }\n  };\n\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  parseObjectData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n\n    return parsed;\n  }\n\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  getMaxOverflow() {\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      index,\n      _cachedMeta: {\n        vScale\n      }\n    } = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n\n    const ruler = this._getRuler();\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n        base,\n        head: base\n      } : this._calculateBarValuePixels(i);\n\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  _getStacks(last, dataIndex) {\n    const {\n      iScale\n    } = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type).filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n\n    const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n\n    const iScaleValue = currentParsed && currentParsed[iScale.axis];\n\n    const skipNull = meta => {\n      const parsed = meta._parsed.find(item => item[iScale.axis] === iScaleValue);\n\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n        stacks.push(meta.stack);\n      }\n\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n\n    const index = name !== undefined ? stacks.indexOf(name) : -1;\n    return index === -1 ? stacks.length - 1 : index;\n  }\n\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  _calculateBarValuePixels(index) {\n    const {\n      _cachedMeta: {\n        vScale,\n        _stacked,\n        index: datasetIndex\n      },\n      options: {\n        base: baseValue,\n        minBarLength\n      }\n    } = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n\n      center = range.start + range.chunk * stackIndex + range.chunk / 2;\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n\nclass BubbleController extends DatasetController {\n  static id = 'bubble';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n\n    return parsed;\n  }\n\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n\n    return parsed;\n  }\n\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n\n    return parsed;\n  }\n\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n    let max = 0;\n\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n\n    return max > 0 && max;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale\n    } = this._cachedMeta;\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    if (values.$shared) {\n      values = Object.assign({}, values, {\n        $shared: false\n      });\n    }\n\n    const radius = values.radius;\n\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n    return values;\n  }\n\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n\n  return {\n    ratioX,\n    ratioY,\n    offsetX,\n    offsetY\n  };\n}\n\nclass DoughnutController extends DatasetController {\n  static id = 'doughnut';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      }\n    },\n    cutout: '50%',\n    rotation: 0,\n    circumference: 360,\n    radius: '100%',\n    spacing: 0,\n    indexAxis: 'r'\n  };\n  static descriptors = {\n    _scriptable: name => name !== 'spacing',\n    _indexable: name => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n\n            if (data.labels.length && data.datasets.length) {\n              const {\n                labels: {\n                  pointStyle,\n                  color\n                }\n              } = chart.legend.options;\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n\n            return [];\n          }\n\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = i => +data[i];\n\n      if (isObject(data[start])) {\n        const {\n          key = 'value'\n        } = this._parsing;\n\n        getter = i => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n\n        const rotation = controller._getRotation();\n\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min\n    };\n  }\n\n  update(mode) {\n    const chart = this.chart;\n    const {\n      chartArea\n    } = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n\n    const chartWeight = this._getRingWeight(this.index);\n\n    const {\n      circumference,\n      rotation\n    } = this._getRotationExtents();\n\n    const {\n      ratioX,\n      ratioY,\n      offsetX,\n      offsetY\n    } = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n    meta.total = this.calculateTotal();\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n\n    const circumference = this._getCircumference();\n\n    if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    let startAngle = this._getRotation();\n\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n\n      startAngle += circumference;\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n\n    return max;\n  }\n\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n\n}\n\nclass LineController extends DatasetController {\n  static id = 'line';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    showLine: true,\n    spanGaps: false\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category'\n      },\n      _value_: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      dataset: line,\n      data: points = [],\n      _dataset\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = this.resolveDatasetElementOptions(mode);\n\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n\n}\n\nclass PolarAreaController extends DatasetController {\n  static id = 'polarArea';\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      }\n    },\n    indexAxis: 'r',\n    startAngle: 0\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n\n            if (data.labels.length && data.datasets.length) {\n              const {\n                labels: {\n                  pointStyle,\n                  color\n                }\n              } = chart.legend.options;\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n\n            return [];\n          }\n\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n\n      }\n    },\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n    return range;\n  }\n\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    this.outerRadius = outerRadius - radiusLength * this.index;\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n  }\n\n}\n\nclass PieController extends DoughnutController {\n  static id = 'pie';\n  static defaults = {\n    cutout: 0,\n    rotation: 0,\n    circumference: 360,\n    radius: '100%'\n  };\n}\n\nclass RadarController extends DatasetController {\n  static id = 'radar';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    }\n  };\n  static overrides = {\n    aspectRatio: 1,\n    scales: {\n      r: {\n        type: 'radialLinear'\n      }\n    }\n  };\n\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n}\n\nclass ScatterController extends DatasetController {\n  static id = 'scatter';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n  static overrides = {\n    interaction: {\n      mode: 'point'\n    },\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      data: points = []\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n      if (!this.datasetElementType) {\n        this.addElements();\n      }\n\n      const {\n        dataset: line,\n        _dataset\n      } = meta;\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    } else if (this.datasetElementType) {\n      delete meta.dataset;\n      this.datasetElementType = false;\n    }\n\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {\n      showLine\n    } = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BarController: BarController,\n  BubbleController: BubbleController,\n  DoughnutController: DoughnutController,\n  LineController: LineController,\n  PieController: PieController,\n  PolarAreaController: PolarAreaController,\n  RadarController: RadarController,\n  ScatterController: ScatterController\n});\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\n\n\nclass DateAdapterBase {\n  /**\n  * Override default date adapter methods.\n  * Accepts type parameter to define options type.\n  * @example\n  * Chart._adapters._date.override<{myAdapterOption: string}>({\n  *   init() {\n  *     console.log(this.options.myAdapterOption);\n  *   }\n  * })\n  */\n  static override(members) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  options;\n\n  constructor(options) {\n    this.options = options || {};\n  } // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n\n  init() {}\n\n  formats() {\n    return abstract();\n  }\n\n  parse() {\n    return abstract();\n  }\n\n  format() {\n    return abstract();\n  }\n\n  add() {\n    return abstract();\n  }\n\n  diff() {\n    return abstract();\n  }\n\n  startOf() {\n    return abstract();\n  }\n\n  endOf() {\n    return abstract();\n  }\n\n}\n\nvar adapters = {\n  _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {\n    controller,\n    data,\n    _sorted\n  } = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  const spanGaps = metaset.dataset ? metaset.dataset.options ? metaset.dataset.options.spanGaps : null : null;\n\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n\n    if (!intersect) {\n      const result = lookupMethod(data, axis, value);\n\n      if (spanGaps) {\n        const {\n          vScale\n        } = controller._cachedMeta;\n        const {\n          _parsed\n        } = metaset;\n\n        const distanceToDefinedLo = _parsed.slice(0, result.lo + 1).reverse().findIndex(point => !isNullOrUndef(point[vScale.axis]));\n\n        result.lo -= Math.max(0, distanceToDefinedLo);\n\n        const distanceToDefinedHi = _parsed.slice(result.hi).findIndex(point => !isNullOrUndef(point[vScale.axis]));\n\n        result.hi += Math.max(0, distanceToDefinedHi);\n      }\n\n      return result;\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {\n          lo: start.lo,\n          hi: end.hi\n        };\n      }\n    }\n  }\n\n  return {\n    lo: 0,\n    hi: data.length - 1\n  };\n}\n\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {\n      index,\n      data\n    } = metasets[i];\n    const {\n      lo,\n      hi\n    } = binarySearch(metasets[i], axis, value, intersect);\n\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function (pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function (element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {\n      startAngle,\n      endAngle\n    } = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {\n      angle\n    } = getAngleFromPoint(element, {\n      x: position.x,\n      y: position.y\n    });\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n\n    if (distance < minDistance) {\n      items = [{\n        element,\n        datasetIndex,\n        index\n      }];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n\n  return items;\n}\n\nvar Interaction = {\n  evaluateInteractionItems,\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach(meta => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        if (element && !element.skip) {\n          elements.push({\n            element,\n            datasetIndex: meta.index,\n            index\n          });\n        }\n      });\n      return elements;\n    },\n\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n\n        for (let i = 0; i < data.length; ++i) {\n          items.push({\n            element: data[i],\n            datasetIndex,\n            index: i\n          });\n        }\n      }\n\n      return items;\n    },\n\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n\n  }\n};\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({\n      position: pos,\n      options: {\n        stack,\n        stackWeight = 1\n      }\n    } = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && pos + stack,\n      stackWeight\n    });\n  }\n\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n\n  for (const wrap of layouts) {\n    const {\n      stack,\n      pos,\n      stackWeight\n    } = wrap;\n\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n\n    const _stack = stacks[stack] || (stacks[stack] = {\n      count: 0,\n      placed: 0,\n      weight: 0,\n      size: 0\n    });\n\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n\n  return stacks;\n}\n\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {\n    vBoxMaxWidth,\n    hBoxMaxHeight\n  } = params;\n  let i, ilen, layout;\n\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {\n      fullSize\n    } = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {\n    pos,\n    box\n  } = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n\n    const stack = stacks[layout.stack] || {\n      size: 0,\n      count: 1\n    };\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal ? {\n    same: widthChanged,\n    other: heightChanged\n  } : {\n    same: heightChanged,\n    other: widthChanged\n  };\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n    positions.forEach(pos => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n    const {\n      same,\n      other\n    } = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {\n    x,\n    y\n  } = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {\n      count: 1,\n      placed: 0,\n      weight: 1\n    };\n    const weight = layout.stackWeight / stack.weight || 1;\n\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n\n    item._layers = item._layers || function () {\n      return [{\n        z: 0,\n\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w\n    };\n    each(boxes.chartArea, layout => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      });\n    });\n  }\n\n};\n\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n\n  releaseContext(context) {\n    return false;\n  }\n\n  addEventListener(chart, type, listener) {}\n\n  removeEventListener(chart, type, listener) {}\n\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  isAttached(canvas) {\n    return true;\n  }\n\n  updateConfig(config) {}\n\n}\n\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n\n}\n\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\nconst eventListenerOptions = supportsEventListenerOptions ? {\n  passive: true\n} : false;\n\nfunction addListener(node, type, listener) {\n  if (node) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction removeListener(chart, type, listener) {\n  if (chart && chart.canvas) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {\n    x,\n    y\n  } = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n\n  const container = canvas && _getParentNode(canvas);\n\n  if (!container) {\n    return;\n  }\n\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n\n    if (width === 0 && height === 0) {\n      return;\n    }\n\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled(event => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n  addListener(canvas, type, proxy);\n  return proxy;\n}\n\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  releaseContext(context) {\n    const canvas = context.canvas;\n\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach(prop => {\n      const value = initial[prop];\n\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach(key => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  isAttached(canvas) {\n    const container = canvas && _getParentNode(canvas);\n\n    return !!(container && container.isConnected);\n  }\n\n}\n\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return BasicPlatform;\n  }\n\n  return DomPlatform;\n}\n\nclass Element {\n  static defaults = {};\n  static defaultRoutes = undefined;\n  x;\n  y;\n  active = false;\n  options;\n  $animations;\n\n  tooltipPosition(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  getProps(props, final) {\n    const anims = this.$animations;\n\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this;\n    }\n\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n    });\n    return ret;\n  }\n\n}\n\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n\n  const tickLength = scale._tickSize();\n\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n\n  return Math.max(spacing, 1);\n}\n\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n\n  return result;\n}\n\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n\n  return diff;\n}\n\nconst reverseAlign = align => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\n\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\n\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n\n  return result;\n}\n\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n\n    lineValue += validIndex < index ? offset : -offset;\n\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n\n  return lineValue;\n}\n\nfunction garbageCollect(caches, length) {\n  each(caches, cache => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n  return lines * font.lineHeight + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n\n  if (reverse && position !== 'right' || !reverse && position === 'right') {\n    ret = reverseAlign(ret);\n  }\n\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {\n    top,\n    left,\n    bottom,\n    right,\n    chart\n  } = scale;\n  const {\n    chartArea,\n    scales\n  } = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n\n  return {\n    titleX,\n    titleY,\n    maxWidth,\n    rotation\n  };\n}\n\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  init(options) {\n    this.options = options.setContext(this.getContext());\n    this.axis = options.axis;\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  parse(raw, index) {\n    return raw;\n  }\n\n  getUserBounds() {\n    let {\n      _userMin,\n      _userMax,\n      _suggestedMin,\n      _suggestedMax\n    } = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isNumberFinite(_userMin),\n      maxDefined: isNumberFinite(_userMax)\n    };\n  }\n\n  getMinMax(canStack) {\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {\n        min,\n        max\n      };\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  getTicks() {\n    return this.ticks;\n  }\n\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  getLabelItems() {\n    let chartArea = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.chart.chartArea;\n\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n\n    return items;\n  }\n\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  beforeUpdate() {\n    callback(this.options.beforeUpdate, [this]);\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    const {\n      beginAtZero,\n      grace,\n      ticks: tickOpts\n    } = this.options;\n    const sampleSize = tickOpts.sampleSize;\n    this.beforeUpdate();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n    this.ticks = this.buildTicks() || [];\n    this.afterBuildTicks();\n    const samplingEnabled = sampleSize < this.ticks.length;\n\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    this.configure();\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation();\n    this.afterCalculateLabelRotation();\n\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit();\n    this.afterFit();\n    this.afterUpdate();\n  }\n\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      reversePixels = !reversePixels;\n    }\n\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    callback(this.options.afterUpdate, [this]);\n  }\n\n  beforeSetDimensions() {\n    callback(this.options.beforeSetDimensions, [this]);\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n\n  afterSetDimensions() {\n    callback(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    callback(this.options[name], [this]);\n  }\n\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n\n  determineDataLimits() {}\n\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n\n  buildTicks() {\n    return [];\n  }\n\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    callback(this.options.beforeTickToLabelConversion, [this]);\n  }\n\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n\n  afterTickToLabelConversion() {\n    callback(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  beforeCalculateLabelRotation() {\n    callback(this.options.beforeCalculateLabelRotation, [this]);\n  }\n\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n\n  afterCalculateLabelRotation() {\n    callback(this.options.afterCalculateLabelRotation, [this]);\n  }\n\n  afterAutoSkip() {}\n\n  beforeFit() {\n    callback(this.options.beforeFit, [this]);\n  }\n\n  fit() {\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {\n      chart,\n      options: {\n        ticks: tickOpts,\n        title: titleOpts,\n        grid: gridOpts\n      }\n    } = this;\n\n    const display = this._isVisible();\n\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      if (tickOpts.display && this.ticks.length) {\n        const {\n          first,\n          last,\n          widest,\n          highest\n        } = this._getLabelSizes();\n\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {\n      ticks: {\n        align,\n        padding\n      },\n      position\n    } = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    callback(this.options.afterFit, [this]);\n  }\n\n  isHorizontal() {\n    const {\n      axis,\n      position\n    } = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n    this.generateTickLabels(ticks);\n    let i, ilen;\n\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {\n      ctx,\n      _longestTextCache: caches\n    } = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {\n        data: {},\n        gc: []\n      };\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = idx => ({\n      width: widths[idx] || 0,\n      height: heights[idx] || 0\n    });\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights\n    };\n  }\n\n  getLabelForValue(value) {\n    return value;\n  }\n\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n\n  getValueForPixel(pixel) {}\n\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  getBaseValue() {\n    const {\n      min,\n      max\n    } = this;\n    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n  }\n\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n\n    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {\n      grid,\n      position,\n      border\n    } = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n\n    const alignBorderValue = function (pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n    return items;\n  }\n\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {\n      position,\n      ticks: optionTicks\n    } = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {\n      align,\n      crossAlign,\n      padding,\n      mirror\n    } = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n\n        if (mirror) {\n          textOffset *= -1;\n        }\n\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += lineHeight / 2 * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n          case 'middle':\n            top -= height / 2;\n            break;\n\n          case 'bottom':\n            top -= height;\n            break;\n        }\n\n        switch (textAlign) {\n          case 'center':\n            left -= width / 2;\n            break;\n\n          case 'right':\n            left -= width;\n            break;\n\n          case 'inner':\n            if (i === ilen - 1) {\n              left -= width;\n            } else if (i > 0) {\n              left -= width / 2;\n            }\n\n            break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {\n      position,\n      ticks\n    } = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {\n      position,\n      ticks: {\n        crossAlign,\n        mirror,\n        padding\n      }\n    } = this.options;\n\n    const labelSizes = this._getLabelSizes();\n\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {\n      textAlign,\n      x\n    };\n  }\n\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {\n        top: 0,\n        left: this.left,\n        bottom: chart.height,\n        right: this.right\n      };\n    }\n\n    if (position === 'top' || position === 'bottom') {\n      return {\n        top: this.top,\n        left: 0,\n        bottom: this.bottom,\n        right: chart.width\n      };\n    }\n  }\n\n  drawBackground() {\n    const {\n      ctx,\n      options: {\n        backgroundColor\n      },\n      left,\n      top,\n      width,\n      height\n    } = this;\n\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n\n    return 0;\n  }\n\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine({\n            x: item.x1,\n            y: item.y1\n          }, {\n            x: item.x2,\n            y: item.y2\n          }, item);\n        }\n\n        if (grid.drawTicks) {\n          drawLine({\n            x: item.tx1,\n            y: item.ty1\n          }, {\n            x: item.tx2,\n            y: item.ty2\n          }, {\n            color: item.tickColor,\n            width: item.tickWidth,\n            borderDash: item.tickBorderDash,\n            borderDashOffset: item.tickBorderDashOffset\n          });\n        }\n      }\n    }\n  }\n\n  drawBorder() {\n    const {\n      chart,\n      ctx,\n      options: {\n        border,\n        grid\n      }\n    } = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n\n    if (!axisWidth) {\n      return;\n    }\n\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  drawTitle() {\n    const {\n      ctx,\n      options: {\n        position,\n        title,\n        reverse\n      }\n    } = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = titleArgs(this, offset, position, align);\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw: chartArea => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: chartArea => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: chartArea => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n\n}\n\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  get(id) {\n    return this.items[id];\n  }\n\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = merge(Object.create(null), [parentScope ? defaults.get(parentScope) : {}, defaults.get(scope), item.defaults]);\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  add() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    this._each('register', args);\n  }\n\n  remove() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    this._each('unregister', args);\n  }\n\n  addControllers() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    this._each('register', args, this.controllers);\n  }\n\n  addElements() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    this._each('register', args, this.elements);\n  }\n\n  addPlugins() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n\n    this._each('register', args, this.plugins);\n  }\n\n  addScales() {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n\n    this._each('register', args, this.scales);\n  }\n\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  removeControllers() {\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n\n    this._each('unregister', args, this.controllers);\n  }\n\n  removeElements() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n\n    this._each('unregister', args, this.elements);\n  }\n\n  removePlugins() {\n    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n\n    this._each('unregister', args, this.plugins);\n  }\n\n  removeScales() {\n    for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      args[_key10] = arguments[_key10];\n    }\n\n    this._each('unregister', args, this.scales);\n  }\n\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n\n      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n        this._exec(method, reg, arg);\n      } else {\n        each(arg, item => {\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n\n    callback(component['before' + camelMethod], [], component);\n    registry[method](component);\n    callback(component['after' + camelMethod], [], component);\n  }\n\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n\n    return this.plugins;\n  }\n\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n\n    return item;\n  }\n\n}\n\nvar registry = /* #__PURE__ */new Registry();\n\nclass PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n\n      this._notify(this._init, chart, 'uninstall');\n    }\n\n    return result;\n  }\n\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n\n      if (callback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n\n}\n\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {\n    plugins,\n    localIds\n  };\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n\n  if (options === true) {\n    return {};\n  }\n\n  return options;\n}\n\nfunction createDescriptors(chart, _ref2, options, all) {\n  let {\n    plugins,\n    localIds\n  } = _ref2;\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n\n    if (opts === null) {\n      continue;\n    }\n\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {\n        plugin,\n        local: localIds[id]\n      }, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, _ref3, opts, context) {\n  let {\n    plugin,\n    local\n  } = _ref3;\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nfunction determineAxis(id) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n\n  for (var _len11 = arguments.length, scaleOptions = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {\n    scaleOptions[_key11 - 1] = arguments[_key11];\n  }\n\n  for (const opts of scaleOptions) {\n    const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n\n    if (axis) {\n      return axis;\n    }\n  }\n\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {\n      axis\n    };\n  }\n}\n\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter(d => d.xAxisID === id || d.yAxisID === id);\n\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n\n  return {};\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {\n    scales: {}\n  };\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{\n      axis\n    }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{\n        axis\n      }, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n\n    this._resolverCache.clear();\n  }\n\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType, () => [[`datasets.${datasetType}`, '']]);\n  }\n\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`, () => [[`datasets.${datasetType}.transitions.${transition}`, `transitions.${transition}`], [`datasets.${datasetType}`, '']]);\n  }\n\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`, () => [[`datasets.${datasetType}.elements.${elementType}`, `datasets.${datasetType}`, `elements.${elementType}`, '']]);\n  }\n\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`, () => [[`plugins.${id}`, ...(plugin.additionalOptionScopes || [])]]);\n  }\n\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n\n    let cache = _scopeCache.get(mainScope);\n\n    if (!cache || resetCache) {\n      cache = new Map();\n\n      _scopeCache.set(mainScope, cache);\n    }\n\n    return cache;\n  }\n\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {\n      options,\n      type\n    } = this;\n\n    const cache = this._cachedScopes(mainScope, resetCache);\n\n    const cached = cache.get(keyLists);\n\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n    const array = Array.from(scopes);\n\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n\n    return array;\n  }\n\n  chartOptionScopes() {\n    const {\n      options,\n      type\n    } = this;\n    return [options, overrides[type] || {}, defaults.datasets[type] || {}, {\n      type\n    }, defaults, descriptors];\n  }\n\n  resolveNamedOptions(scopes, names, context) {\n    let prefixes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [''];\n    const result = {\n      $shared: true\n    };\n    const {\n      resolver,\n      subPrefixes\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n\n    return result;\n  }\n\n  createResolver(scopes, context) {\n    let prefixes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [''];\n    let descriptorDefaults = arguments.length > 3 ? arguments[3] : undefined;\n    const {\n      resolver\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n  }\n\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n\n  return cached;\n}\n\nconst hasFunction = value => isObject(value) && Object.getOwnPropertyNames(value).some(key => isFunction(value[key]));\n\nfunction needContext(proxy, names) {\n  const {\n    isScriptable,\n    isIndexable\n  } = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n\n    if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar version = \"4.4.8\";\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\n\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\n\nfunction compare2Level(l1, l2) {\n  return function (a, b) {\n    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n\n  return item;\n}\n\nconst instances = {};\n\nconst getChart = key => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter(c => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n\n  for (const key of keys) {\n    const intKey = +key;\n\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n\n  if (isClick) {\n    return lastEvent;\n  }\n\n  return e;\n}\n\nfunction getSizeForArea(scale, chartArea, field) {\n  return scale.options.clip ? scale[field] : chartArea[field];\n}\n\nfunction getDatasetArea(meta, chartArea) {\n  const {\n    xScale,\n    yScale\n  } = meta;\n\n  if (xScale && yScale) {\n    return {\n      left: getSizeForArea(xScale, chartArea, 'left'),\n      right: getSizeForArea(xScale, chartArea, 'right'),\n      top: getSizeForArea(yScale, chartArea, 'top'),\n      bottom: getSizeForArea(yScale, chartArea, 'bottom')\n    };\n  }\n\n  return chartArea;\n}\n\nclass Chart {\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register() {\n    registry.add(...arguments);\n    invalidatePlugins();\n  }\n\n  static unregister() {\n    registry.remove(...arguments);\n    invalidatePlugins();\n  }\n\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n\n    if (existingChart) {\n      throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {\n      options: {\n        aspectRatio,\n        maintainAspectRatio\n      },\n      width,\n      height,\n      _aspectRatio\n    } = this;\n\n    if (!isNullOrUndef(aspectRatio)) {\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  _initialize() {\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n    this.notifyPlugins('afterInit');\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {\n        width,\n        height\n      };\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {\n      size: newSize\n    });\n    callback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(Object.keys(scaleOpts).map(id => {\n        const scaleOptions = scaleOpts[id];\n        const axis = determineAxis(id, scaleOptions);\n        const isRadial = axis === 'r';\n        const isHorizontal = axis === 'x';\n        return {\n          options: scaleOptions,\n          dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n          dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n        };\n      }));\n    }\n\n    each(items, item => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    each(scales, scale => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n\n      metasets.splice(numData, numMeta - numData);\n    }\n\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  _removeUnreferencedMetasets() {\n    const {\n      _metasets: metasets,\n      data: {\n        datasets\n      }\n    } = this;\n\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n\n        meta = this.getDatasetMeta(i);\n      }\n\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {\n          datasetElementType,\n          dataElementType\n        } = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n\n    return newControllers;\n  }\n\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  reset() {\n    this._resetElements();\n\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n\n    this._checkEventBindings();\n\n    this._updateHiddenIndices();\n\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    const newControllers = this.buildOrUpdateControllers();\n    this.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {\n        controller\n      } = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n\n    this._updateLayout(minPadding);\n\n    if (!animsDisabled) {\n      each(newControllers, controller => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    this.notifyPlugins('afterUpdate', {\n      mode\n    });\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    const {\n      _active,\n      _lastEvent\n    } = this;\n\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  _updateScales() {\n    each(this.scales, scale => {\n      layouts.removeBox(this, scale);\n    });\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  _updateHiddenIndices() {\n    const {\n      _hiddenIndices\n    } = this;\n    const changes = this._getUniformDataChanges() || [];\n\n    for (const {\n      method,\n      start,\n      count\n    } of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n\n    const makeSet = idx => new Set(_dataChanges.filter(c => c[0] === idx).map((c, i) => i + ',' + c.splice(1).join(',')));\n\n    const changeSet = makeSet(0);\n\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n\n    return Array.from(changeSet).map(c => c.split(',')).map(a => ({\n      method: a[1],\n      start: +a[2],\n      count: +a[3]\n    }));\n  }\n\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    this._layers = [];\n    each(this.boxes, box => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n\n      if (box.configure) {\n        box.configure();\n      }\n\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({\n        datasetIndex: i\n      }) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {\n      mode\n    });\n  }\n\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {\n      meta,\n      index,\n      mode,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({\n        chart: this\n      });\n    }\n  }\n\n  draw() {\n    let i;\n\n    if (this._resizeBeforeDraw) {\n      const {\n        width,\n        height\n      } = this._resizeBeforeDraw;\n      this._resizeBeforeDraw = null;\n\n      this._resize(width, height);\n    }\n\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    const layers = this._layers;\n\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta, this.chartArea);\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n\n    meta.controller.draw();\n\n    if (useClip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {\n      chart: this,\n      type: 'chart'\n    }));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {\n        visible\n      });\n      this.update(ctx => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {\n      canvas,\n      ctx\n    } = this;\n\n    this._stop();\n\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image() {\n    return this.canvas.toDataURL(...arguments);\n  }\n\n  bindEvents() {\n    this.bindUserEvents();\n\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, type => _add(type, listener));\n  }\n\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached;\n\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      this._stop();\n\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(_ref4 => {\n      let {\n        datasetIndex,\n        index\n      } = _ref4;\n      const meta = this.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      this._lastEvent = null;\n\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n\n    const eventFilter = plugin => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  _handleEvent(e, replay, inChartArea) {\n    const {\n      _active: lastActive = [],\n      options\n    } = this;\n    const useFinalPosition = replay;\n\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n\n    const isClick = _isClickEvent(e);\n\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      this._lastEvent = null;\n      callback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed || replay) {\n      this._active = active;\n\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n    return changed;\n  }\n\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n\n}\n\nfunction invalidatePlugins() {\n  return each(Chart.instances, chart => chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n  const {\n    startAngle,\n    pixelMargin,\n    x,\n    y,\n    outerRadius,\n    innerRadius\n  } = element;\n  let angleMargin = pixelMargin / outerRadius; // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n/**\n * Parse border radius from the provided options\n */\n\n\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2); // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n\n  const computeOuterLimit = val => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n  };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */\n\n\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta)\n  };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\n\n\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  const {\n    x,\n    y,\n    startAngle: start,\n    pixelMargin,\n    innerRadius: innerR\n  } = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {\n    outerStart,\n    outerEnd,\n    innerStart,\n    innerEnd\n  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle); // The corner segment from point 2 to point 3\n\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    } // The line from point 3 to point 4\n\n\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y); // The corner segment from point 4 to point 5\n\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    } // The inner arc from point 5 to point b to point 6\n\n\n    const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true); // The corner segment from point 6 to point 7\n\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    } // The line from point 7 to point 8\n\n\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y); // The corner segment from point 8 to point 1\n\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference\n  } = element;\n  let endAngle = element.endAngle;\n\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference,\n    options\n  } = element;\n  const {\n    borderWidth,\n    borderJoinStyle,\n    borderDash,\n    borderDashOffset\n  } = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nclass ArcElement extends Element {\n  static id = 'arc';\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n  static descriptors = {\n    _scriptable: true,\n    _indexable: name => name !== 'borderDash'\n  };\n  circumference;\n  endAngle;\n  fullCircles;\n  innerRadius;\n  outerRadius;\n  pixelMargin;\n  startAngle;\n\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {\n      angle,\n      distance\n    } = getAngleFromPoint(point, {\n      x: chartX,\n      y: chartY\n    });\n    const {\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius,\n      circumference\n    } = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n\n    const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n    const betweenAngles = _circumference >= TAU || nonZeroBetween;\n\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return betweenAngles && withinRadius;\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius\n    } = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius'], useFinalPosition);\n    const {\n      offset,\n      spacing\n    } = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx) {\n    const {\n      options,\n      circumference\n    } = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n    ctx.restore();\n  }\n\n}\n\nfunction setStyle(ctx, options) {\n  let style = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : options;\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment) {\n  let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const count = points.length;\n  const {\n    start: paramsStart = 0,\n    end: paramsEnd = count - 1\n  } = params;\n  const {\n    start: segmentStart,\n    end: segmentEnd\n  } = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\nfunction pathSegment(ctx, line, segment, params) {\n  const {\n    points,\n    options\n  } = line;\n  const {\n    count,\n    start,\n    loop,\n    ilen\n  } = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {\n    move = true,\n    reverse\n  } = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {\n    count,\n    start,\n    ilen\n  } = pathVars(points, segment, params);\n  const {\n    move = true,\n    reverse\n  } = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = index => (start + (reverse ? ilen - index : index)) % count;\n\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n\n    lastY = y;\n  }\n\n  drawX();\n}\n\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n\n  if (!path) {\n    path = line._path = new Path2D();\n\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {\n    segments,\n    options\n  } = line;\n\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n\n    if (segmentMethod(ctx, line, segment, {\n      start,\n      end: start + count - 1\n    })) {\n      ctx.closePath();\n    }\n\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nclass LineElement extends Element {\n  static id = 'line';\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  static descriptors = {\n    _scriptable: true,\n    _indexable: name => name !== 'borderDash' && name !== 'fill'\n  };\n\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n\n    const segments = _boundSegments(this, {\n      property,\n      start: value,\n      end: value\n    });\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n\n    const _interpolate = _getInterpolationMethod(options);\n\n    let i, ilen;\n\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {\n        start,\n        end\n      } = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n\n    return result.length === 1 ? result[0] : result;\n  }\n\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  path(ctx, start, count) {\n    const segments = this.segments;\n\n    const segmentMethod = _getSegmentMethod(this);\n\n    let loop = this._loop;\n    start = start || 0;\n    count = count || this.points.length - start;\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {\n        start,\n        end: start + count - 1\n      });\n    }\n\n    return !!loop;\n  }\n\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n      draw(ctx, this, start, count);\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {\n    [axis]: value\n  } = el.getProps([axis], useFinalPosition);\n  return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\n\nclass PointElement extends Element {\n  static id = 'point';\n  parsed;\n  skip;\n  stop;\n  /**\n  * @type {any}\n  */\n\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n  /**\n  * @type {any}\n  */\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx, area) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {}; // @ts-expect-error Fallbacks should never be hit in practice\n\n    return options.radius + options.hitRadius;\n  }\n\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n  const {\n    x,\n    y,\n    base,\n    width,\n    height\n  } = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {\n    left,\n    top,\n    right,\n    bottom\n  };\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {\n    enableBorderRadius\n  } = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount) {\n  let refRect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nclass BarElement extends Element {\n  static id = 'bar';\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {\n      inflateAmount,\n      options: {\n        borderColor,\n        backgroundColor\n      }\n    } = this;\n    const {\n      inner,\n      outer\n    } = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      base,\n      horizontal\n    } = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcElement: ArcElement,\n  BarElement: BarElement,\n  LineElement: LineElement,\n  PointElement: PointElement\n});\nconst BORDER_COLORS = ['rgb(54, 162, 235)', 'rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)' // grey\n]; // Border colors with 50% transparency\n\nconst BACKGROUND_COLORS = /* #__PURE__ */BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset, i) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n  return i;\n}\n\nfunction getColorizer(chart) {\n  let i = 0;\n  return (dataset, datasetIndex) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(descriptors) {\n  let k;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(descriptor) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nfunction containsDefaultColorsDefenitions() {\n  return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\n\nvar plugin_colors = {\n  id: 'colors',\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  },\n\n  beforeLayout(chart, _args, options) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {\n        datasets\n      },\n      options: chartOptions\n    } = chart.config;\n    const {\n      elements\n    } = chartOptions;\n    const containsColorDefenition = containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements) || containsDefaultColorsDefenitions();\n\n    if (!options.forceOverride && containsColorDefenition) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n    datasets.forEach(colorizer);\n  }\n\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {\n      x: pointAx,\n      y: pointAy\n    } = data[a];\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({ ...data[intermediateIndex1],\n            x: avgX\n          });\n        }\n\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({ ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach(dataset => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {\n    iScale\n  } = meta;\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {\n    start,\n    count\n  };\n}\n\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {\n        _data,\n        indexAxis\n      } = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n\n      if (chart.options.parsing) {\n        return;\n      }\n\n      let {\n        start,\n        count\n      } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function () {\n            return this._decimated;\n          },\n          set: function (d) {\n            this._data = d;\n          }\n        });\n      }\n\n      let decimated;\n\n      switch (options.algorithm) {\n        case 'lttb':\n          decimated = lttbDecimation(data, start, count, availableWidth, options);\n          break;\n\n        case 'min-max':\n          decimated = minMaxDecimation(data, start, count, availableWidth);\n          break;\n\n        default:\n          throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n\n};\n\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {\n      start,\n      end\n    } = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n\n  return parts;\n}\n\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n\n  return {\n    property,\n    start,\n    end\n  };\n}\n\nfunction _pointsFromSegments(boundary, line) {\n  const {\n    x = null,\n    y = null\n  } = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(_ref5 => {\n    let {\n      start,\n      end\n    } = _ref5;\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n\n    if (y !== null) {\n      points.push({\n        x: first.x,\n        y\n      });\n      points.push({\n        x: last.x,\n        y\n      });\n    } else if (x !== null) {\n      points.push({\n        x,\n        y: first.y\n      });\n      points.push({\n        x,\n        y: last.y\n      });\n    }\n  });\n  return points;\n}\n\nfunction _findSegmentEnd(start, end, points) {\n  for (; end > start; end--) {\n    const point = points[end];\n\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {\n      tension: 0\n    },\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\nfunction _decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\nfunction _getTargetPixel(fill, scale) {\n  let pixel = null;\n\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n\n  return pixel;\n}\n\nfunction _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n\n  return value;\n}\n\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n\n  return fill;\n}\n\nfunction _buildStackLine(source) {\n  const {\n    scale,\n    index,\n    line\n  } = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({\n    x: null,\n    y: scale.bottom\n  }, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n\n  return new LineElement({\n    points,\n    options: {}\n  });\n}\n\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n\n    if (meta.index === index) {\n      break;\n    }\n\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n\n  return below;\n}\n\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {\n      first,\n      last,\n      point\n    } = findPoint(line, sourcePoint, 'x');\n\n    if (!point || first && last) {\n      continue;\n    }\n\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n\n      if (!last) {\n        break;\n      }\n    }\n  }\n\n  points.push(...postponed);\n}\n\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n\n  return {\n    first,\n    last,\n    point\n  };\n}\n\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    bounds = bounds || {\n      start: 0,\n      end: TAU\n    };\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n\n}\n\nfunction _getTarget(source) {\n  const {\n    chart,\n    fill,\n    line\n  } = source;\n\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n\n  return computeLinearBoundary(source);\n}\n\nfunction computeLinearBoundary(source) {\n  const {\n    scale = {},\n    fill\n  } = source;\n\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isNumberFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {\n    scale,\n    fill\n  } = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n\n  const value = _getTargetValue(fill, scale, start);\n\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n\n  return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n\n  const {\n    line,\n    scale,\n    axis\n  } = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {\n    above = color,\n    below = color\n  } = fillOption || {};\n\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {\n      line,\n      target,\n      above,\n      below,\n      area,\n      scale,\n      axis\n    });\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {\n    line,\n    target,\n    above,\n    below,\n    area,\n    scale\n  } = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {\n      line,\n      target,\n      color: above,\n      scale,\n      property\n    });\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n\n  fill(ctx, {\n    line,\n    target,\n    color: below,\n    scale,\n    property\n  });\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {\n    segments,\n    points\n  } = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n\n  for (const segment of segments) {\n    const {\n      start,\n      end\n    } = segment;\n    const firstPoint = points[start];\n\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n\n    lineLoop = !!target.pathSegment(ctx, segment, {\n      move: lineLoop\n    });\n\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {\n    line,\n    target,\n    property,\n    color,\n    scale\n  } = cfg;\n\n  const segments = _segments(line, target, property);\n\n  for (const {\n    source: src,\n    target: tgt,\n    start,\n    end\n  } of segments) {\n    const {\n      style: {\n        backgroundColor = color\n      } = {}\n    } = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {\n        move: lineLoop,\n        reverse: true\n      });\n      loop = lineLoop && targetLoop;\n\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  const {\n    top,\n    bottom\n  } = scale.chart.chartArea;\n  const {\n    property,\n    start,\n    end\n  } = bounds || {};\n\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\nvar index = {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {\n    boxHeight = fontSize,\n    boxWidth = fontSize\n  } = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter(item => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {\n      options,\n      ctx\n    } = this;\n\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n\n    const titleHeight = this._computeTitleHeight();\n\n    const {\n      boxWidth,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth;\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight;\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {\n      ctx,\n      maxWidth,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {\n        left: 0,\n        top,\n        row,\n        width: itemWidth,\n        height: itemHeight\n      };\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {\n      ctx,\n      maxHeight,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    this.legendItems.forEach((legendItem, i) => {\n      const {\n        itemWidth,\n        itemHeight\n      } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({\n          width: currentColWidth,\n          height: currentColHeight\n        });\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      hitboxes[i] = {\n        left,\n        top: currentColHeight,\n        col,\n        width: itemWidth,\n        height: itemHeight\n      };\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({\n      width: currentColWidth,\n      height: currentColHeight\n    });\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n\n    const titleHeight = this._computeTitleHeight();\n\n    const {\n      legendHitBoxes: hitboxes,\n      options: {\n        align,\n        labels: {\n          padding\n        },\n        rtl\n      }\n    } = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n\n    if (this.isHorizontal()) {\n      let row = 0;\n\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  _draw() {\n    const {\n      options: opts,\n      columnSizes,\n      lineWidths,\n      ctx\n    } = this;\n    const {\n      align,\n      labels: labelOpts\n    } = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {\n      padding\n    } = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    this.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {\n      boxWidth,\n      boxHeight,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n\n    const drawLegendBox = function (x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      ctx.save();\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function (x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    const isHorizontal = this.isHorizontal();\n\n    const titleHeight = this._computeTitleHeight();\n\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor;\n      ctx.fillStyle = legendItem.fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n      lh = this.legendHitBoxes;\n\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  handleEvent(e) {\n    const opts = this.options;\n\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n\n      if (previous && !sameItem) {\n        callback(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        callback(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      callback(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {\n    itemWidth,\n    itemHeight\n  };\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n\n  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n\n  return false;\n}\n\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: ctx => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {\n          labels: {\n            usePointStyle,\n            pointStyle,\n            textAlign,\n            color,\n            useBorderRadius,\n            borderRadius\n          }\n        } = chart.legend.options;\n        return chart._getSortedDatasetMetas().map(meta => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n\n    },\n    title: {\n      color: ctx => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: ''\n    }\n  },\n  descriptors: {\n    _scriptable: name => !name.startsWith('on'),\n    labels: {\n      _scriptable: name => !['generateLabels', 'filter', 'sort'].includes(name)\n    }\n  }\n};\n\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {\n      top,\n      left,\n      bottom,\n      right,\n      options\n    } = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n\n      maxWidth = bottom - top;\n    }\n\n    return {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    };\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold'\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal'\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let xSet = new Set();\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        xSet.add(pos.x);\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    if (count === 0 || xSet.size === 0) {\n      return false;\n    }\n\n    const xAverage = [...xSet].reduce((a, b) => a + b) / xSet.size;\n    return {\n      x: xAverage,\n      y: y / count\n    };\n  },\n\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n\n};\n\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n\n  return str;\n}\n\nfunction createTooltipItem(chart, item) {\n  const {\n    element,\n    datasetIndex,\n    index\n  } = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {\n    label,\n    value\n  } = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {\n    body,\n    footer,\n    title\n  } = tooltip;\n  const {\n    boxWidth,\n    boxHeight\n  } = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n  }\n\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n  }\n\n  if (footerLineCount) {\n    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  let widthPadding = 0;\n\n  const maxLineWidth = function (line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n  each(body, bodyItem => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {\n    width,\n    height\n  };\n}\n\nfunction determineYAlign(chart, size) {\n  const {\n    y,\n    height\n  } = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > chart.height - height / 2) {\n    return 'bottom';\n  }\n\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {\n    x,\n    width\n  } = size;\n  const caret = options.caretSize + options.caretPadding;\n\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {\n    x,\n    width\n  } = size;\n  const {\n    width: chartWidth,\n    chartArea: {\n      left,\n      right\n    }\n  } = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {\n    x,\n    width\n  } = size;\n\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= width / 2;\n  }\n\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {\n    y,\n    height\n  } = size;\n\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= height / 2;\n  }\n\n  return y;\n}\n\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {\n    caretSize,\n    caretPadding,\n    cornerRadius\n  } = options;\n  const {\n    xAlign,\n    yAlign\n  } = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {\n    topLeft,\n    topRight,\n    bottomLeft,\n    bottomRight\n  } = toTRBLCorners(cornerRadius);\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  beforeTitle: noop,\n\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n\n  afterTitle: noop,\n  beforeBody: noop,\n  beforeLabel: noop,\n\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n\n    const value = tooltipItem.formattedValue;\n\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n\n    return label;\n  },\n\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0\n    };\n  },\n\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation\n    };\n  },\n\n  afterLabel: noop,\n  afterBody: noop,\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nclass Tooltip extends Element {\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n  }\n\n  getBody(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const bodyItems = [];\n    each(tooltipItems, context => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n  }\n\n  getFooter(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    each(tooltipItems, context => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {\n        chart: this.chart,\n        tooltip: this,\n        replay\n      });\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      caretSize,\n      cornerRadius\n    } = options;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(cornerRadius);\n    const {\n      x: ptX,\n      y: ptY\n    } = tooltipPoint;\n    const {\n      width,\n      height\n    } = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + height / 2;\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n\n      y3 = y1;\n    }\n\n    return {\n      x1,\n      x2,\n      x3,\n      y1,\n      y2,\n      y3\n    };\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {\n      boxHeight,\n      boxWidth\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {\n      body\n    } = this;\n    const {\n      bodySpacing,\n      bodyAlign,\n      displayColors,\n      boxHeight,\n      boxWidth,\n      boxPadding\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function (line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = toFont(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      x,\n      y\n    } = pt;\n    const {\n      width,\n      height\n    } = tooltipSize;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(options.cornerRadius);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n\n      if (!position) {\n        return;\n      }\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = toPadding(options.padding);\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      this.drawBackground(pt, ctx, tooltipSize, options);\n      overrideTextDirection(ctx, options.textDirection);\n      pt.y += padding.top;\n      this.drawTitle(pt, ctx, options);\n      this.drawBody(pt, ctx, options);\n      this.drawFooter(pt, ctx, options);\n      restoreTextDirection(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(_ref6 => {\n      let {\n        datasetIndex,\n        index\n      } = _ref6;\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  handleEvent(e, replay) {\n    let inChartArea = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n\n    this._ignoreReplayEvents = false;\n    const options = this.options;\n    const lastActive = this._active || [];\n\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    const positionChanged = this._positionChanged(active, e);\n\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      return lastActive.filter(i => this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n    }\n\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  _positionChanged(active, e) {\n    const {\n      caretX,\n      caretY,\n      options\n    } = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n\n}\n\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({\n        chart,\n        options\n      });\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', { ...args,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold'\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {},\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold'\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart'\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: name => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\nvar plugins = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Colors: plugin_colors,\n  Decimation: plugin_decimation,\n  Filler: index,\n  Legend: plugin_legend,\n  SubTitle: plugin_subtitle,\n  Title: plugin_title,\n  Tooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({\n      index,\n      label: raw\n    });\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n\n  return value;\n}\n\nclass CategoryScale extends Scale {\n  static id = 'category';\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n\n    if (added.length) {\n      const labels = this.getLabels();\n\n      for (const {\n        index,\n        label\n      } of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n\n      this._addedLabels = [];\n    }\n\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({\n        value\n      });\n    }\n\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {\n    bounds,\n    step,\n    min,\n    max,\n    precision,\n    count,\n    maxTicks,\n    maxDigits,\n    includeBounds\n  } = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {\n    min: rmin,\n    max: rmax\n  } = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{\n      value: rmin\n    }, {\n      value: rmax\n    }];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({\n        value: min\n      });\n\n      if (niceMin < min) {\n        j++;\n      }\n\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n\n    ticks.push({\n      value: tickValue\n    });\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({\n        value: max\n      });\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({\n      value: niceMax\n    });\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, _ref7) {\n  let {\n    horizontal,\n    minRotation\n  } = _ref7;\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {\n      beginAtZero\n    } = this.options;\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this;\n\n    const setMin = v => min = minDefined ? min : v;\n\n    const setMax = v => max = maxDefined ? max : v;\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    let {\n      maxTicksLimit,\n      stepSize\n    } = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n}\n\nclass LinearScale extends LinearScaleBase {\n  static id = 'linear';\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? min : 0;\n    this.max = isNumberFinite(max) ? max : 1;\n    this.handleTickRangeOptions();\n  }\n\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n\n    const tickFont = this._resolveTickFontOptions(0);\n\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n\n}\n\nconst log10Floor = v => Math.floor(log10(v));\n\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n\n  return Math.min(rangeExp, log10Floor(min));\n}\n\nfunction generateTicks(generationOptions, _ref8) {\n  let {\n    min,\n    max\n  } = _ref8;\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n\n  while (value < max) {\n    ticks.push({\n      value,\n      major: isMajor(value),\n      significand\n    });\n\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({\n    value: lastTick,\n    major: isMajor(lastTick),\n    significand\n  });\n  return ticks;\n}\n\nclass LogarithmicScale extends Scale {\n  static id = 'logarithmic';\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n\n    return isNumberFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n    this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => min = minDefined ? min : v;\n\n    const setMax = v => max = maxDefined ? max : v;\n\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n\n    if (max <= 0) {\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  configure() {\n    const start = this.min;\n    super.configure();\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n\n    return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n\n}\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - size / 2,\n      end: pos + size / 2\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\nfunction fitWithPointLabels(scale) {\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {\n    extra,\n    additionalAngle,\n    padding,\n    size\n  } = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    visible: true,\n    x: pointLabelPosition.x,\n    y,\n    textAlign,\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\n\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n\n  const apexesInArea = _isPointInArea({\n    x: left,\n    y: top\n  }, area) || _isPointInArea({\n    x: left,\n    y: bottom\n  }, area) || _isPointInArea({\n    x: right,\n    y: top\n  }, area) || _isPointInArea({\n    x: right,\n    y: bottom\n  }, area);\n\n  return !apexesInArea;\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {\n    centerPointLabels,\n    display\n  } = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= w / 2;\n  }\n\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= h / 2;\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n\n  return y;\n}\n\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n  const {\n    backdropColor\n  } = opts;\n\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {\n    ctx,\n    options: {\n      pointLabels\n    }\n  } = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n\n    if (!item.visible) {\n      continue;\n    }\n\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {\n      x,\n      y,\n      textAlign\n    } = item;\n    renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n      color: optsAtIndex.color,\n      textAlign: textAlign,\n      textBaseline: 'middle'\n    });\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {\n    ctx\n  } = scale;\n\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {\n    color,\n    lineWidth\n  } = gridLineOpts;\n\n  if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash || []);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nclass RadialLinearScale extends LinearScaleBase {\n  static id = 'radialLinear';\n  static defaults = {\n    display: true,\n    animate: true,\n    position: 'chartArea',\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n    grid: {\n      circular: false\n    },\n    startAngle: 0,\n    ticks: {\n      showLabelBackdrop: true,\n      callback: Ticks.formatters.numeric\n    },\n    pointLabels: {\n      backdropColor: undefined,\n      backdropPadding: 2,\n      display: true,\n      font: {\n        size: 10\n      },\n\n      callback(label) {\n        return label;\n      },\n\n      padding: 5,\n      centerPointLabels: false\n    }\n  };\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(false);\n    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n    this.handleTickRangeOptions();\n  }\n\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n    this._pointLabels = this.getLabels().map((value, index) => {\n      const label = callback(this.options.pointLabels.callback, [value, index], this);\n      return label || label === 0 ? label : '';\n    }).filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter) {\n    let additionalAngle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {\n      left,\n      top,\n      right,\n      bottom\n    } = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom\n    };\n  }\n\n  drawBackground() {\n    const {\n      backgroundColor,\n      grid: {\n        circular\n      }\n    } = this.options;\n\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {\n      angleLines,\n      grid,\n      border\n    } = opts;\n    const labelCount = this._pointLabels.length;\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0 || index === 0 && this.min < 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {\n          color,\n          lineWidth\n        } = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  drawBorder() {}\n\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && this.min >= 0 && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n        strokeColor: optsAtIndex.textStrokeColor,\n        strokeWidth: optsAtIndex.textStrokeWidth\n      });\n    });\n    ctx.restore();\n  }\n\n  drawTitle() {}\n\n}\n\nconst INTERVALS = {\n  millisecond: {\n    common: true,\n    size: 1,\n    steps: 1000\n  },\n  second: {\n    common: true,\n    size: 1000,\n    steps: 60\n  },\n  minute: {\n    common: true,\n    size: 60000,\n    steps: 60\n  },\n  hour: {\n    common: true,\n    size: 3600000,\n    steps: 24\n  },\n  day: {\n    common: true,\n    size: 86400000,\n    steps: 30\n  },\n  week: {\n    common: false,\n    size: 604800000,\n    steps: 4\n  },\n  month: {\n    common: true,\n    size: 2.628e9,\n    steps: 12\n  },\n  quarter: {\n    common: false,\n    size: 7.884e9,\n    steps: 4\n  },\n  year: {\n    common: true,\n    size: 3.154e10\n  }\n};\nconst UNITS = /* #__PURE__ */Object.keys(INTERVALS);\n\nfunction sorter(a, b) {\n  return a - b;\n}\n\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {\n    parser,\n    round,\n    isoWeekday\n  } = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {\n      lo,\n      hi\n    } = _lookup(timestamps, time);\n\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n\n  return ticks;\n}\n\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nclass TimeScale extends Scale {\n  static id = 'time';\n  static defaults = {\n    bounds: 'data',\n    adapters: {},\n    time: {\n      parser: false,\n      unit: false,\n      round: false,\n      isoWeekday: false,\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      source: 'auto',\n      callback: false,\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n    adapter.init(opts);\n    mergeIf(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    if (!minDefined || !maxDefined) {\n      _applyBounds(this._getLabelBounds());\n\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n\n    return {\n      min,\n      max\n    };\n  }\n\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  initOffsets() {\n    let timestamps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n    this._offsets = {\n      start,\n      end,\n      factor: 1 / (start + 1 + end)\n    };\n  }\n\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    return Object.keys(ticks).sort(sorter).map(x => +x);\n  }\n\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return callback(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n    };\n  }\n\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n\n    const size = this._getLabelSize(exampleLabel);\n\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return this._cache.data = metas[0].controller.getAllParsedValues(this);\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return this._cache.data = this.normalize(timestamps);\n  }\n\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n  }\n\n  normalize(values) {\n    return _arrayUnique(values.sort(sorter));\n  }\n\n}\n\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'pos', val));\n    }\n\n    ({\n      pos: prevSource,\n      time: prevTarget\n    } = table[lo]);\n    ({\n      pos: nextSource,\n      time: nextTarget\n    } = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'time', val));\n    }\n\n    ({\n      time: prevSource,\n      pos: prevTarget\n    } = table[lo]);\n    ({\n      time: nextSource,\n      pos: nextTarget\n    } = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n  static id = 'timeseries';\n  static defaults = TimeScale.defaults;\n\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  buildLookupTable(timestamps) {\n    const {\n      min,\n      max\n    } = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      return [{\n        time: min,\n        pos: 0\n      }, {\n        time: max,\n        pos: 1\n      }];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({\n          time: curr,\n          pos: i / (ilen - 1)\n        });\n      }\n    }\n\n    return table;\n  }\n\n  _generate() {\n    const min = this.min;\n    const max = this.max;\n    let timestamps = super.getDataTimestamps();\n\n    if (!timestamps.includes(min) || !timestamps.length) {\n      timestamps.splice(0, 0, min);\n    }\n\n    if (!timestamps.includes(max) || timestamps.length === 1) {\n      timestamps.push(max);\n    }\n\n    return timestamps.sort((a, b) => a - b);\n  }\n\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n\n    if (data.length && label.length) {\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n\n    timestamps = this._cache.all = timestamps;\n    return timestamps;\n  }\n\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CategoryScale: CategoryScale,\n  LinearScale: LinearScale,\n  LogarithmicScale: LogarithmicScale,\n  RadialLinearScale: RadialLinearScale,\n  TimeScale: TimeScale,\n  TimeSeriesScale: TimeSeriesScale\n});\nconst registerables = [controllers, elements, plugins, scales];\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };","map":{"version":3,"mappings":"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","names":["Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","requestAnimFrame","call","window","_update","Date","now","remaining","running","items","length","i","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","transparent","interpolators","boolean","from","to","factor","color","c0","helpersColor","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","resolve","_fn","_easing","effects","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","isObject","animationOptions","Object","keys","defaults","animation","animatedProps","getOwnPropertyNames","key","option","isArray","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","animator","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","x","y","top","right","bottom","left","toClip","t","r","b","l","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","found","isFinite","sign","convertObjectDataToArray","data","meta","iScale","vScale","iAxisKey","axis","vAxisKey","adata","Array","isStacked","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iAxis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","createContext","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","datasetElementType","dataElementType","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","new","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","valueOrDefault","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","unlistenArrayEvents","_dataCheck","isExtensible","listenArrayEvents","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","resolveObjectKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","defined","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","getAllScaleValues","_cache","$bar","visibleMetas","concat","_arrayUnique","sort","a","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","isNullOrUndef","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","v","setInflateAmount","inflateAmount","BarController","grouped","numbers","overrides","_index_","offset","grid","_value_","beginAtZero","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","currentParsed","iScaleValue","skipNull","find","val","isNaN","indexOf","_getStackCount","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","stackIndex","rects","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","TAU","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","_angleBetween","calcMin","maxX","maxY","HALF_PI","minX","PI","minY","DoughnutController","animateRotate","animateScale","spacing","descriptors","_scriptable","_indexable","startsWith","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","borderWidth","onClick","e","legendItem","toggleDataVisibility","innerRadius","outerRadius","getter","_getRotation","toRadians","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","toPercentage","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","toDimension","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","arc","metaData","formatNumber","locale","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","LineController","showLine","spanGaps","line","_dataset","animationsDisabled","_getStartAndCountOfVisiblePoints","_scaleRangesChanged","_datasetIndex","_decimated","segment","animated","maxGapLength","isNumber","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","angleLines","display","circular","pointLabels","_parseObjectDataRadialScale","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","interaction","registry","getElement","abstract","Error","DateAdapterBase","members","override","prototype","init","formats","format","diff","startOf","endOf","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","_rlookupByKey","_lookupByKey","result","distanceToDefinedLo","slice","lo","findIndex","distanceToDefinedHi","hi","el","getRange","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","_isPointInArea","inRange","getNearestRadialItems","getProps","getAngleFromPoint","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","modes","getRelativePosition","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","z","removeBox","layoutItem","minPadding","toPadding","verticalBoxes","horizontalBoxes","each","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","readUsedSize","displayHeight","eventListenerOptions","supportsEventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","_getParentNode","throttled","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","_isDomSupported","OffscreenCanvas","Element","defaultRoutes","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","_factorize","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","toFont","lines","lineHeight","createScaleContext","createTickContext","titleAlign","_toLeftRightCenter","titleArgs","titleX","titleY","_alignStartEnd","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","finiteOrDefault","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","callback","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","_limitValue","title","toDegrees","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","_measureText","valueAt","idx","pixel","decimal","_int16Range","_alignPixel","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","clipArea","renderTextOptions","renderText","unclipArea","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","merge","routeDefaults","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","_capitalize","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","callCallback","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","getOpts","pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","d","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","mergeIf","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","isFunction","subResolver","_attachContext","descriptorDefaults","resolverCache","_createResolver","p","hasFunction","isScriptable","isIndexable","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getSizeForArea","field","getDatasetArea","Chart","version","invalidatePlugins","userConfig","initialCanvas","existingChart","uid","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","debounce","resizeDelay","_initialize","maintainAspectRatio","responsive","retinaScale","bindEvents","clearCanvas","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","setsEqual","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","Interaction","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","_elementsEqual","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","_isClickEvent","onHover","clipArc","pixelMargin","angleMargin","closePath","toRadiusCorners","_readValueToProps","parseBorderRadius","angleDelta","o","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","chartX","chartY","rAdjust","nonZeroBetween","betweenAngles","withinRadius","_isBetween","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","_steppedLineTo","tension","cubicInterpolationMode","_bezierCurveTo","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","_steppedInterpolation","_bezierInterpolation","_pointInLine","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","capBezierPoints","_points","_segments","_pointsUpdated","_updateBezierControlPoints","_computeSegments","interpolate","_boundSegments","_interpolate","interpolated","hitRadius","PointElement","hoverRadius","mouseX","mouseY","inXRange","inYRange","drawPoint","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","toTRBL","toTRBLCorners","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","addRectPath","addRoundedRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","k","containsColorsDefinition","containsDefaultColorsDefenitions","forceOverride","_args","chartOptions","containsColorDefenition","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","configurable","enumerable","writable","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","algorithm","beforeElementsUpdate","xAxis","threshold","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","_boundSegment","fillSource","_getEdge","_normalizeAngle","_pointsFromSegments","boundary","linePoints","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","clipVertical","clipY","lineLoop","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","getRtlAdapter","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","drawPointLegend","yBoxTop","xBoxLeft","fillText","strikethrough","overrideTextDirection","textDirection","textWidth","setWidth","realX","_textX","fontLineHeight","calculateLegendItemHeight","restoreTextDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","_element","afterEvent","ci","useBorderRadius","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","WeakMap","positioners","average","xSet","xAverage","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","noop","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","afterInit","afterDraw","_fallback","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","generateTicks","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceNum","niceMin","niceMax","numSpaces","almostWhole","almostEquals","decimalPlaces","_decimalPlaces","relativeLabelSize","tickValue","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","_setMinAndMaxByKey","LinearScale","Ticks","formatters","numeric","log10Floor","log10","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","minExp","exp","significand","lastTick","LogarithmicScale","logarithmic","_zero","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","createPointLabelItem","itemOpts","outerDistance","extra","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","isNotOverlapped","apexesInArea","drawPointLabelBox","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawPointLabels","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","animate","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","_lookup","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","adapters","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_filterBetween","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables"],"sources":["C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\core\\core.animator.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\core\\core.animation.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\core\\core.animations.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\core\\core.datasetController.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\controllers\\controller.bar.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\controllers\\controller.bubble.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\controllers\\controller.doughnut.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\controllers\\controller.line.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\controllers\\controller.polarArea.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\controllers\\controller.pie.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\controllers\\controller.radar.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\controllers\\controller.scatter.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\core\\core.adapters.ts","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\core\\core.interaction.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\core\\core.layouts.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\platform\\platform.base.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\platform\\platform.basic.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\platform\\platform.dom.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\platform\\index.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\core\\core.element.ts","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\core\\core.scale.autoskip.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\core\\core.scale.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\core\\core.typedRegistry.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\core\\core.registry.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\core\\core.plugins.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\core\\core.config.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\core\\core.controller.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\elements\\element.arc.ts","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\elements\\element.line.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\elements\\element.point.ts","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\elements\\element.bar.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\plugins\\plugin.colors.ts","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\plugins\\plugin.decimation.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.segment.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.helper.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.options.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.stack.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\simpleArc.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.drawing.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\index.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\plugins\\plugin.legend.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\plugins\\plugin.title.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\plugins\\plugin.subtitle.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\plugins\\plugin.tooltip.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\scales\\scale.category.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\scales\\scale.linearbase.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\scales\\scale.linear.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\scales\\scale.logarithmic.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\scales\\scale.radialLinear.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\scales\\scale.time.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\scales\\scale.timeseries.js","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\chart.js\\src\\index.ts"],"sourcesContent":["import {requestAnimFrame} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('./core.animation.js').default } Animation\n * @typedef { import('./core.controller.js').default } Chart\n */\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is export for typedoc\n */\nexport class Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  /**\n\t * @private\n\t */\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            // if the animation has been updated and its duration prolonged,\n            // update to total duration of current animations run (for progress event)\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          // Remove the item by replacing it with last item and removing the last\n          // A lot faster than splice.\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} event - event name\n\t * @param {Function} cb - callback\n\t */\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  /**\n\t * Add animations\n\t * @param {Chart} chart\n\t * @param {Animation[]} items - animations\n\t */\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n\n  /**\n\t * Counts number of active animations for the chart\n\t * @param {Chart} chart\n\t */\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  /**\n\t * Start animating (all charts)\n\t * @param {Chart} chart\n\t */\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n\t * Stop all animations for the chart\n\t * @param {Chart} chart\n\t */\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  /**\n\t * Remove chart from Animator\n\t * @param {Chart} chart\n\t */\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Animator();\n","import effects from '../helpers/helpers.easing.js';\nimport {resolve} from '../helpers/helpers.options.js';\nimport {color as helpersColor} from '../helpers/helpers.color.js';\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  /**\n   * @param {string} from\n   * @param {string} to\n   * @param {number} factor\n   */\n  color(from, to, factor) {\n    const c0 = helpersColor(from || transparent);\n    const c1 = c0.valid && helpersColor(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\n\nexport default class Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      // update current evaluated value, for smoother animations\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n\n    this._active = from !== to && (loop || (elapsed < duration));\n\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n","import animator from './core.animator.js';\nimport Animation from './core.animation.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isObject} from '../helpers/helpers.core.js';\n\nexport default class Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  /**\n\t * Utility to handle animation of `options`.\n\t * @private\n\t */\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      // Going to shared options:\n      // After all animations are done, assign the shared options object to the element\n      // So any new updates to the shared options are observed\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n        // rejected, noop\n      });\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @private\n\t */\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          // There is an existing active animation, let's update that\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        // not animated, set directly to new value\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n\n\n  /**\n\t * Update `target` properties to new values, using configured animations\n\t * @param {object} target - object to update\n\t * @param {object} values - new target properties\n\t * @returns {boolean|undefined} - `true` if animations were started\n\t **/\n  update(target, values) {\n    if (this._properties.size === 0) {\n      // Nothing is animated, just apply the new values.\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  // @ts-ignore\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    // Going from shared options to distinct one:\n    // Create new options object containing the old shared values and start updating that.\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n","import Animations from './core.animations.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core.js';\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection.js';\nimport {createContext, sign} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('./core.scale.js').default } Scale\n */\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  let found = false;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      found = true;\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n\n  if (!found && !options.all) {\n    return 0;\n  }\n\n  return value;\n}\n\nfunction convertObjectDataToArray(data, meta) {\n  const {iScale, vScale} = meta;\n  const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n  const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      [iAxisKey]: key,\n      [vAxisKey]: data[key]\n    };\n  }\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  // Not using meta.index here, because it might be already updated if the dataset changed location\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\n\nexport default class DatasetController {\n\n  /**\n   * @type {any}\n   */\n  static defaults = {};\n\n  /**\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\n   */\n  static datasetElementType = null;\n\n  /**\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\n   */\n  static dataElementType = null;\n\n  /**\n\t * @param {Chart} chart\n\t * @param {number} datasetIndex\n\t */\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    /** @type {boolean | object} */\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  /**\n\t * @param {string} scaleID\n\t * @return {Scale}\n\t */\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  /**\n\t * @private\n\t */\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  /**\n\t * @private\n\t */\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    // In order to correctly handle data addition/deletion animation (and thus simulate\n    // real-time charts), we need to monitor these data modifications and synchronize\n    // the internal metadata accordingly.\n\n    if (isObject(data)) {\n      const meta = this._cachedMeta;\n      this._data = convertObjectDataToArray(data, meta);\n    } else if (_data !== data) {\n      if (_data) {\n        // This case happens when the user replaced the data array instance.\n        unlistenArrayEvents(_data, this);\n        // Discard old parsed data and stacks\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    // make sure cached _stacked status is current\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    // detect change in stack option\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      // remove values from old stack\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    // Re-sync meta data in case the user replaced the data array or if we missed\n    // any updates and so make sure that we handle number of datapoints changing.\n    this._resyncElements(resetNewElements);\n\n    // if stack changed, update stack values for the whole dataset\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n      meta._stacked = isStacked(meta.vScale, meta);\n    }\n  }\n\n  /**\n\t * Merges user-supplied and default dataset-level options\n\t * @private\n\t */\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  /**\n\t * @param {number} start\n\t * @param {number} count\n\t */\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [1,3,4]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {xScale0: 0, yScale0: 1}\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {x: 0, y: 1}\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id. _custom is optional\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        // if the data is sorted, we don't need to check further from this end of array\n        break;\n      }\n    }\n    if (sorted) {\n      // in the sorted case, find first non-skipped value from other end of array\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return false;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {} // eslint-disable-line no-unused-vars\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  /**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @param {boolean} [active] - true if hover\n\t * @return {object} style object\n\t */\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  /**\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    // context is provided as a function, and is called only if needed,\n    // so we don't create a context for each element if not needed.\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      // `$shared` indicates this set of options can be shared between multiple elements.\n      // Sharing is used to reduce number of properties to change during animation.\n      values.$shared = sharing;\n\n      // We cache options by `mode`, which can be 'active' for example. This enables us\n      // to have the 'active' element options and 'default' options to switch between\n      // when interacting.\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n\n  /**\n\t * Utility for getting the options object shared between elements\n\t * @protected\n\t */\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  /**\n\t * Utility for determining if `options` should be included in the updated properties\n\t * @protected\n\t */\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  /**\n   * @todo v4, rename to getSharedOptions and remove excess functions\n   */\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n\n  /**\n\t * Utility for updating an element with new properties, using animations when appropriate.\n\t * @protected\n\t */\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  /**\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\n\t * @protected\n\t */\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      // When going from active to inactive, we need to update to the shared options.\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  /**\n\t * @private\n\t */\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    // Apply changes detected through array listeners\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      // TODO: It is not optimal to always parse the old data\n      // This is done because we are not detecting direct assignments:\n      // chart.data.datasets[0].data[5] = 10;\n      // chart.data.datasets[0].data[5].y = 10;\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @private\n\t */\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n\n  /**\n\t * @private\n   */\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {\n  _arrayUnique, isArray, isNullOrUndef,\n  valueOrDefault, resolveObjectKey, sign, defined\n} from '../helpers/index.js';\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      // Ignore truncated pixels\n      return;\n    }\n    if (defined(prev)) {\n      // curr - prev === 0 is ignored\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    // When bar thickness is enforced, category and bar percentages are ignored.\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    // first data: its size is double based on the next point or,\n    // if it's also the last data, we use the scale size.\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    // last data: its size is also double based on the previous point.\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  // Store `barEnd` (furthest away from origin) as parsed value,\n  // to make stacking straight forward\n  item[vScale.axis] = barEnd;\n\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\n\nexport default class BarController extends DatasetController {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n\n  /**\n\t * Overriding primitive data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding array data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding object data parsing since we support mixed primitive/array\n\t * value-scale data for float bars\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      // float bar: only one end of the bar is considered by `super`\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n\n    super.initialize();\n\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  /**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @param {number} [dataIndex] - The data index of the ruler\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n    const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n    const iScaleValue = currentParsed && currentParsed[iScale.axis];\n\n    const skipNull = (meta) => {\n      const parsed = meta._parsed.find(item => item[iScale.axis] === iScaleValue);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      // stacked   | meta.stack\n      //           | found | not found | undefined\n      // false     |   x   |     x     |     x\n      // true      |       |     x     |\n      // undefined |       |     x     |     x\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\n    // stack where possible invisible bars will be located.\n    // https://github.com/chartjs/Chart.js/issues/6368\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  /**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  /**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n   * @param {number} [dataIndex]\n\t * @returns {number} The stack index\n\t * @private\n\t */\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1; // indexOf returns -1 if element is not present\n\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      // bar thickness ratio used for non-grouped bars\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  /**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked, index: datasetIndex}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      // bars crossing origin are not stacked\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      // When not visible, no height\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        // visual data coordinates after applying minBarLength\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      // For non-grouped bar charts, exact pixel values are used\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {valueOrDefault} from '../helpers/helpers.core.js';\n\nexport default class BubbleController extends DatasetController {\n\n  static id = 'bubble';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    // In case values were cached (and thus frozen), we need to clone the values\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n\n    // Custom radius resolution\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n\n    return values;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\n\nexport default class DoughnutController extends DatasetController {\n\n  static id = 'doughnut';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      },\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutout: '50%',\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%',\n\n    // Spacing between arcs\n    spacing: 0,\n\n    indexAxis: 'r',\n  };\n\n  static descriptors = {\n    _scriptable: (name) => name !== 'spacing',\n    _indexable: (name) => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash'),\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    // Need to override these to give a nice default\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  /**\n\t * Override data parsing, since we are not using scales\n\t */\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  /**\n\t * @private\n\t */\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  /**\n\t * Get the maximal rotation & circumference extents\n\t * across all visible datasets.\n\t */\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n\n    // Compute the maximal rotation & circumference limits.\n    // If we only consider our dataset, this can cause problems when two datasets\n    // are both less than a circle with different rotations (starting angles)\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n\n    meta.total = this.calculateTotal();\n\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @private\n   */\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      // Find the outmost visible dataset\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n\n  /**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  /**\n\t * Returns the sum of all visible data set weights.\n\t * @private\n\t */\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class LineController extends DatasetController {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n\n    showLine: true,\n    spanGaps: false,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n      },\n      _value_: {\n        type: 'linear',\n      },\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    // Update Line\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class PolarAreaController extends DatasetController {\n\n  static id = 'polarArea';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      },\n    },\n    indexAxis: 'r',\n    startAngle: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @protected\n   */\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n\n    return range;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n\n    return count;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\n","import DoughnutController from './controller.doughnut.js';\n\n// Pie charts are Doughnut chart with different defaults\nexport default class PieController extends DoughnutController {\n\n  static id = 'pie';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    // The percentage of the chart that we cut out of the middle.\n    cutout: 0,\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%'\n  };\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {_parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class RadarController extends DatasetController {\n\n  static id = 'radar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    },\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n\n    // Update Line\n    line.points = points;\n    // In resize mode only point locations change, so no need to set the points or options.\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class ScatterController extends DatasetController {\n\n  static id = 'scatter';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n\n    interaction: {\n      mode: 'point'\n    },\n\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n\n      // https://github.com/chartjs/Chart.js/issues/11333\n      if (!this.datasetElementType) {\n        this.addElements();\n      }\n      const {dataset: line, _dataset} = meta;\n\n      // Update Line\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    } else if (this.datasetElementType) {\n      // https://github.com/chartjs/Chart.js/issues/11333\n      delete meta.dataset;\n      this.datasetElementType = false;\n    }\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {showLine} = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n","/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nimport type {AnyObject} from '../types/basic.js';\nimport type {ChartOptions} from '../types/index.js';\n\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\n\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\n  readonly options: T;\n  /**\n   * Will called with chart options after adapter creation.\n   */\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\n  /**\n   * Returns a map of time formats for the supported formatting units defined\n   * in Unit as well as 'datetime' representing a detailed date/time string.\n   */\n  formats(this: DateAdapter<T>): Record<TimeUnit | 'datetime', string>;\n  /**\n   * Parses the given `value` and return the associated timestamp.\n   * @param value - the value to parse (usually comes from the data)\n   * @param [format] - the expected data format\n   */\n  parse(this: DateAdapter<T>, value: unknown, format?: string): number | null;\n  /**\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\n   * @param timestamp - the timestamp to format\n   * @param format - the date/time token\n   */\n  format(this: DateAdapter<T>, timestamp: number, format: string): string;\n  /**\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param amount - the amount to add\n   * @param unit - the unit as string\n   */\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\n  /**\n   * Returns the number of `unit` between the given timestamps.\n   * @param a - the input timestamp (reference)\n   * @param b - the timestamp to subtract\n   * @param unit - the unit as string\n   */\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\n  /**\n   * Returns start of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   * @param [weekday] - the ISO day of the week with 1 being Monday\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n   */\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number | boolean): number;\n  /**\n   * Returns end of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   */\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit): number;\n}\n\nfunction abstract<T = void>(): T {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase implements DateAdapter {\n\n  /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */\n  static override<T extends AnyObject = AnyObject>(\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\n  ) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  readonly options: AnyObject;\n\n  constructor(options?: AnyObject) {\n    this.options = options || {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n\n  formats(): Record<TimeUnit | 'datetime', string> {\n    return abstract();\n  }\n\n  parse(): number | null {\n    return abstract();\n  }\n\n  format(): string {\n    return abstract();\n  }\n\n  add(): number {\n    return abstract();\n  }\n\n  diff(): number {\n    return abstract();\n  }\n\n  startOf(): number {\n    return abstract();\n  }\n\n  endOf(): number {\n    return abstract();\n  }\n}\n\nexport default {\n  _date: DateAdapterBase as {\n    new (options?: AnyObject): DateAdapter;\n    override<T extends AnyObject = AnyObject>(\n      members: Partial<Omit<DateAdapter<T>, 'options'>>\n    ): void;\n  }\n};\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection.js';\nimport {getRelativePosition} from '../helpers/helpers.dom.js';\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math.js';\nimport {_isPointInArea, isNullOrUndef} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\n * @typedef {{datasetIndex: number, index: number, element: import('./core.element.js').default}} InteractionItem\n * @typedef { import('../types/index.js').Point } Point\n */\n\n/**\n * Helper function to do binary search when possible\n * @param {object} metaset - the dataset meta\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {number} value - the value to find\n * @param {boolean} [intersect] - should the element intersect\n * @returns {{lo:number, hi:number}} indices to search data array between\n */\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  const spanGaps = metaset.dataset ? metaset.dataset.options ? metaset.dataset.options.spanGaps : null : null;\n\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      const result = lookupMethod(data, axis, value);\n      if (spanGaps) {\n        const {vScale} = controller._cachedMeta;\n        const {_parsed} = metaset;\n\n        const distanceToDefinedLo = (_parsed\n          .slice(0, result.lo + 1)\n          .reverse()\n          .findIndex(\n            point => !isNullOrUndef(point[vScale.axis])));\n        result.lo -= Math.max(0, distanceToDefinedLo);\n\n        const distanceToDefinedHi = (_parsed\n          .slice(result.hi)\n          .findIndex(\n            point => !isNullOrUndef(point[vScale.axis])));\n        result.hi += Math.max(0, distanceToDefinedHi);\n      }\n      return result;\n    } else if (controller._sharedOptions) {\n      // _sharedOptions indicates that each element has equal options -> equal proportions\n      // So we can do a ranged binary search based on the range of first element and\n      // be confident to get the full range of indices that can intersect with the value.\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  // Default to all elements, when binary search can not be used.\n  return {lo: 0, hi: data.length - 1};\n}\n\n/**\n * Helper function to select candidate elements for interaction\n * @param {Chart} chart - the chart\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {function} handler - the callback to execute for each visible item\n * @param {boolean} [intersect] - consider intersecting items\n */\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy|r\n */\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {Chart} chart - the chart\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a radial chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a cartesian chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      // Can have multiple items at the same distance in which case we sort by size\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in the chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\n/**\n * Helper function to get the items matching along the given X or Y axis\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis to match\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  // If we want to trigger on an intersect and we don't have any items\n  // that intersect the position, return nothing\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nexport default {\n  // Part of the public API to facilitate developers creating their own modes\n  evaluateInteractionItems,\n\n  // Helper function for different modes\n  modes: {\n    /**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      // Default axis for index mode is 'x' to match old behaviour\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        // don't count items that are skipped (null data)\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n\n      return elements;\n    },\n\n    /**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n\n      return items;\n    },\n\n    /**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    /**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n","import {defined, each, isObject} from '../helpers/helpers.core.js';\nimport {toPadding} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n */\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\n\n/**\n * store dimensions used instead of available chartArea in fitBoxes\n **/\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  // dynamically placed boxes size is not considered\n  if (!isObject(pos)) {\n    if (layout.size) {\n      // this layout was already counted for, lets first reduce old size\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n\n  // return booleans on the changes per direction\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n\n    // Dimensions changed and there were non full width boxes before this\n    // -> we have to refit those\n    refit |= same && refitBoxes.length;\n\n    // Chart area changed in the opposite direction\n    changed = changed || other;\n\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n/**\n * @interface LayoutItem\n * @typedef {object} LayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} draw - Draws the element\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nexport default {\n\n  /**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {LayoutItem} item - the item to add to be laid out\n\t */\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    // initialize item with default values\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    // @ts-ignore\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  /**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\n\t */\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  /**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {LayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  /**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n   * @param {number} minPadding - minimum padding required for each side of chart area\n\t */\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n\n    // Before any changes are made, notify boxes that an update is about to being\n    // This is used to clear any cached data (e.g. scale limits)\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n\n    // Essentially we now have any number of boxes on each of the 4 sides.\n    // Our canvas looks like the following.\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n    // B1 is the bottom axis\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n    // an error will be thrown.\n    //\n    // |----------------------------------------------------|\n    // |                  T1 (Full Width)                   |\n    // |----------------------------------------------------|\n    // |    |    |                 T2                  |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    | C1 |                           | C2 |    |\n    // |    |    |----|                           |----|    |\n    // |    |    |                                     |    |\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\n    // |    |    |                                     |    |\n    // |    |    |----|                           |----|    |\n    // |    |    | C3 |                           | C4 |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    |                 B1                  |    |\n    // |----------------------------------------------------|\n    // |                  B2 (Full Width)                   |\n    // |----------------------------------------------------|\n    //\n\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n\n    // Then fit vertical boxes\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    // Then fit horizontal boxes\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      // if the area changed, re-fit vertical boxes\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n\n    // Finally place the boxes to correct coordinates\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n\n    // Move to opposite side of chart\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n\n    // Finally update boxes in chartArea (radial scale for example)\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n","\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\n/**\n * Abstract class that allows abstracting platform dependencies away from the chart.\n */\nexport default class BasePlatform {\n  /**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\n\t * @param {number} [aspectRatio] - The chart options\n\t */\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n  releaseContext(context) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n  /**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\n\t */\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\n\t */\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  /**\n\t * Returns the maximum size in pixels of given canvas element.\n\t * @param {HTMLCanvasElement} element\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\n\t */\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Updates config with platform specific requirements\n   * @param {import('../core/core.config.js').default} config\n   */\n  updateConfig(config) { // eslint-disable-line no-unused-vars\n    // no-op\n  }\n}\n","/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nimport BasePlatform from './platform.base.js';\n\n/**\n * Platform class for charts without access to the DOM or to many element properties\n * This platform is used by default for any chart passed an OffscreenCanvas.\n * @extends BasePlatform\n */\nexport default class BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n","/**\n * Chart.Platform implementation for targeting a web browser\n */\n\nimport BasePlatform from './platform.base.js';\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom.js';\nimport {throttled} from '../helpers/helpers.extras.js';\nimport {isNullOrUndef} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nconst EXPANDO_KEY = '$chartjs';\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n * @param {HTMLCanvasElement} canvas\n * @param {number} [aspectRatio]\n */\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n  // returns null or '' if no explicit value has been set to the canvas attribute.\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n\n  // Chart.js modifies some canvas values that we want to restore on destroy\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n\n  // Force canvas to display as block to avoid extra space caused by inline\n  // elements, which would interfere with the responsive resize process.\n  // https://github.com/chartjs/Chart.js/issues/2538\n  style.display = style.display || 'block';\n  // Include possible borders in the size\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      // If no explicit render height and style height, let's apply the aspect ratio,\n      // which one can be specified by the user but also by charts as default option\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n  if (node) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction removeListener(chart, type, listener) {\n  if (chart && chart.canvas) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      // If the container size shrank during chart resize, let's assume\n      // scrollbar appeared. So we resize again with the scrollbar visible -\n      // effectively making chart smaller and the scrollbar hidden again.\n      // Because we are inside `throttled`, and currently `ticking`, scroll\n      // events are ignored during this whole 2 resize process.\n      // If we assumed wrong and something else happened, we are resizing\n      // twice in a frame (potential performance issue)\n      listener();\n    }\n  }, window);\n\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    // When its container's display is set to 'none' the callback will be called with a\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\n    // resizing in such case.\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    // This case can occur if the chart is destroyed while waiting\n    // for the throttled function to occur. We prevent crashes by checking\n    // for a destroyed chart\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n\n  addListener(canvas, type, proxy);\n\n  return proxy;\n}\n\n/**\n * Platform class for charts that can access the DOM and global window/document properties\n * @extends BasePlatform\n */\nexport default class DomPlatform extends BasePlatform {\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [aspectRatio]\n\t * @return {CanvasRenderingContext2D|null}\n\t */\n  acquireContext(canvas, aspectRatio) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\n    // inside an iframe or when running in a protected environment. We could guess the\n    // types from their toString() value but let's keep things flexible and assume it's\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\n    // https://github.com/chartjs/Chart.js/issues/3887\n    // https://github.com/chartjs/Chart.js/issues/4102\n    // https://github.com/chartjs/Chart.js/issues/4152\n    if (context && context.canvas === canvas) {\n      // Load platform resources on first chart creation, to make it possible to\n      // import the library before setting platform options.\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  /**\n\t * @param {CanvasRenderingContext2D} context\n\t */\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n\n    // The canvas render size might have been changed (and thus the state stack discarded),\n    // we can't use save() and restore() to restore the initial state. So make sure that at\n    // least the canvas context is reset to the default state by setting the canvas width.\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n    // eslint-disable-next-line no-self-assign\n    canvas.width = canvas.width;\n\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  /**\n\t *\n\t * @param {Chart} chart\n\t * @param {string} type\n\t * @param {function} listener\n\t */\n  addEventListener(chart, type, listener) {\n    // Can have only one listener per type, so make sure previous is removed\n    this.removeEventListener(chart, type);\n\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} type\n\t */\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t */\n  isAttached(canvas) {\n    const container = canvas && _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n","import {_isDomSupported} from '../helpers/index.js';\nimport BasePlatform from './platform.base.js';\nimport BasicPlatform from './platform.basic.js';\nimport DomPlatform from './platform.dom.js';\n\nexport function _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nexport {BasePlatform, BasicPlatform, DomPlatform};\n","import type {AnyObject} from '../types/basic.js';\nimport type {Point} from '../types/geometric.js';\nimport type {Animation} from '../types/animation.js';\nimport {isNumber} from '../helpers/helpers.math.js';\n\nexport default class Element<T = AnyObject, O = AnyObject> {\n\n  static defaults = {};\n  static defaultRoutes = undefined;\n\n  x: number;\n  y: number;\n  active = false;\n  options: O;\n  $animations: Record<keyof T, Animation>;\n\n  tooltipPosition(useFinalPosition: boolean): Point {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y} as Point;\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  /**\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\n   * @param props - properties to get\n   * @param [final] - get the final value (animation target)\n   */\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this as Record<string, unknown>;\n    }\n    const ret: Record<string, unknown> = {};\n    props.forEach((prop) => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\n    });\n    return ret;\n  }\n}\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\nimport {_factorize} from '../helpers/helpers.math.js';\n\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\n * @param {import('./core.scale.js').default} scale\n * @param {Tick[]} ticks\n * @return {Tick[]}\n * @private\n */\nexport function autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  // If there are too many major ticks to display them all\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\n/**\n * @param {number[]} majorIndices\n * @param {Tick[]} ticks\n * @param {number} ticksLimit\n */\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  // If the major ticks are evenly spaced apart, place the minor ticks\n  // so that they divide the major ticks into even chunks\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\n\n/**\n * @param {Tick[]} ticks\n */\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number[]} majorIndices\n * @param {number} spacing\n */\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number} spacing\n * @param {number} [majorStart]\n * @param {number} [majorEnd]\n */\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\n\n/**\n * @param {number[]} arr\n */\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n","import Element from './core.element.js';\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas.js';\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math.js';\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options.js';\nimport {autoSkip} from './core.scale.autoskip.js';\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\n/**\n * @typedef { import('../types/index.js').Chart } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a new array containing numItems from arr\n * @param {any[]} arr\n * @param {number} numItems\n */\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @param {boolean} offsetGridLines\n */\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n\n    // Return undefined if the pixel is out of the range\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\n\n/**\n * @param {object} caches\n * @param {number} length\n */\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\n/**\n * @param {object} options\n */\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\n/**\n * @param {object} options\n */\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n\n  return (lines * font.lineHeight) + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  /** @type {CanvasTextAlign} */\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\n\nexport default class Scale extends Element {\n\n  // eslint-disable-next-line max-statements\n  constructor(cfg) {\n    super();\n\n    /** @type {string} */\n    this.id = cfg.id;\n    /** @type {string} */\n    this.type = cfg.type;\n    /** @type {any} */\n    this.options = undefined;\n    /** @type {CanvasRenderingContext2D} */\n    this.ctx = cfg.ctx;\n    /** @type {Chart} */\n    this.chart = cfg.chart;\n\n    // implements box\n    /** @type {number} */\n    this.top = undefined;\n    /** @type {number} */\n    this.bottom = undefined;\n    /** @type {number} */\n    this.left = undefined;\n    /** @type {number} */\n    this.right = undefined;\n    /** @type {number} */\n    this.width = undefined;\n    /** @type {number} */\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /** @type {number} */\n    this.maxWidth = undefined;\n    /** @type {number} */\n    this.maxHeight = undefined;\n    /** @type {number} */\n    this.paddingTop = undefined;\n    /** @type {number} */\n    this.paddingBottom = undefined;\n    /** @type {number} */\n    this.paddingLeft = undefined;\n    /** @type {number} */\n    this.paddingRight = undefined;\n\n    // scale-specific properties\n    /** @type {string=} */\n    this.axis = undefined;\n    /** @type {number=} */\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    /** @type {Tick[]} */\n    this.ticks = [];\n    /** @type {object[]|null} */\n    this._gridLineItems = null;\n    /** @type {object[]|null} */\n    this._labelItems = null;\n    /** @type {object|null} */\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    /** @type {number} */\n    this._startPixel = undefined;\n    /** @type {number} */\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @param {any} options\n\t * @since 3.0\n\t */\n  init(options) {\n    this.options = options.setContext(this.getContext());\n\n    this.axis = options.axis;\n\n    // parse min/max value, so we can properly determine min/max for other scales\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  /**\n\t * Parse a supported input value to internal representation.\n\t * @param {*} raw\n\t * @param {number} [index]\n\t * @since 3.0\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    return raw;\n  }\n\n  /**\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isFinite(_userMin),\n      maxDefined: isFinite(_userMax)\n    };\n  }\n\n  /**\n\t * @param {boolean} canStack\n\t * @return {{min: number, max: number}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getMinMax(canStack) {\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  /**\n\t * Get the padding needed for the scale\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\n\t * @private\n\t */\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  /**\n\t * Returns the scale tick objects\n\t * @return {Tick[]}\n\t * @since 2.7\n\t */\n  getTicks() {\n    return this.ticks;\n  }\n\n  /**\n\t * @return {string[]}\n\t */\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  /**\n   * @return {import('../types.js').LabelItem[]}\n   */\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n\n  // When a new layout is created, reset the data limits cache\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  // These methods are ordered by lifecycle. Utilities then follow.\n  // Any function defined here is inherited by all scale types.\n  // Any function can be extended by the scale type\n\n  beforeUpdate() {\n    call(this.options.beforeUpdate, [this]);\n  }\n\n  /**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n    this.beforeUpdate();\n\n    // Absorb the master measurements\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n\n    // Dimensions\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n\n    // Data min/max\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n\n    this.ticks = this.buildTicks() || [];\n\n    // Allow modification of ticks in callback.\n    this.afterBuildTicks();\n\n    // Compute tick rotation and fit using a sampled subset of labels\n    // We generally don't need to compute the size of every single label for determining scale size\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    // configure is called twice, once here, once from core.controller.updateLayout.\n    // Here we haven't been positioned yet, but dimensions are correct.\n    // Variables set in configure are needed for calculateLabelRotation, and\n    // it's ok that coordinates are not correct there, only dimensions matter.\n    this.configure();\n\n    // Tick Rotation\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\n    this.afterCalculateLabelRotation();\n\n    // Auto-skip\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      // Generate labels using all non-skipped ticks\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\n    this.afterFit();\n\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n    this.afterUpdate();\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      // by default vertical scales are from bottom to top, so pixels are reversed\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    call(this.options.afterUpdate, [this]);\n  }\n\n  //\n\n  beforeSetDimensions() {\n    call(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    if (this.isHorizontal()) {\n      // Reset position before calculating rotation\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n\n      // Reset position before calculating rotation\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    // Reset padding\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    call(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    call(this.options[name], [this]);\n  }\n\n  // Data limits\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  //\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  /**\n\t * @return {object[]} the ticks\n\t */\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    call(this.options.beforeTickToLabelConversion, [this]);\n  }\n  /**\n\t * Convert ticks to label strings\n\t * @param {Tick[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    call(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  //\n\n  beforeCalculateLabelRotation() {\n    call(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    // Estimate the width of each grid based on the canvas width, the maximum\n    // label width and the number of tick intervals\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    // Allow 3 pixels x2 padding either side for label readability\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    call(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n\n  //\n\n  beforeFit() {\n    call(this.options.beforeFit, [this]);\n  }\n  fit() {\n    // Reset\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight; // fill all the height\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      // Don't bother fitting the ticks if we are not showing the labels\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n        // A horizontal axis is more constrained by the height.\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n        // A vertical axis is more constrained by the width. Labels are the\n        // dominant factor here, so get that length first and account for padding\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n      // which means that the right padding is dominated by the font height\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      // Adjust padding taking into account changes in offsets\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  /**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    call(this.options.afterFit, [this]);\n  }\n\n  // Shared Methods\n  /**\n\t * @return {boolean}\n\t */\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  /**\n\t * @return {boolean}\n\t */\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  /**\n\t * @param {Tick[]} ticks\n\t * @private\n\t */\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n\n    this.generateTickLabels(ticks);\n\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  /**\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  /**\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\n\t * labels where offset indicates the anchor point offset from the top in pixels.\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      // Undefined labels and arrays should not be measured\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        // if it is an array let's measure each element\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = /** @type {string} */ (label[j]);\n          // Undefined labels and arrays should not be measured\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n\n  /**\n\t * Used to get the label to display in the tooltip for the given value\n\t * @param {*} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value;\n  }\n\n  /**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {*} value\n\t * @param {number} [index]\n\t * @return {number}\n\t */\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\n    return NaN;\n  }\n\n  /**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} pixel\n\t * @return {*}\n\t */\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} index\n\t * @return {number}\n\t */\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  /**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} decimal\n\t * @return {number}\n\t */\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  /**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @return {number}\n\t */\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  /**\n\t * @return {number}\n\t */\n  getBaseValue() {\n    const {min, max} = this;\n\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  /**\n\t * @return {number}\n\t * @private\n\t */\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n\n    // Calculate space needed by label in axis direction.\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n    // Calculate space needed for 1 tick in axis direction.\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  /**\n\t * @return {boolean}\n\t * @private\n\t */\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position, border} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      // Skip if the pixel is out of the range\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n\n    return items;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += (lineHeight / 2) * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        default:\n          break;\n        }\n\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        case 'inner':\n          if (i === ilen - 1) {\n            left -= width;\n          } else if (i > 0) {\n            left -= width / 2;\n          }\n          break;\n        default:\n          break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n\n          color: optsAtIndex.backdropColor,\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop,\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {textAlign, x};\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n\n  /**\n   * @protected\n   */\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {\n    const {chart, ctx, options: {border, grid}} = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  /**\n\t * @return {object[]}\n\t * @private\n\t */\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      // backward compatibility: draw has been overridden by custom scale\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  /**\n\t * Returns visible dataset metas that are attached to this scale\n\t * @param {string} [type] - if specified, also filter by dataset type\n\t * @return {object[]}\n\t */\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n\n  /**\n\t * @param {number} index\n\t * @return {object}\n\t * @protected\n \t */\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  /**\n   * @protected\n   */\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n","import {merge} from '../helpers/index.js';\nimport defaults, {overrides} from './core.defaults.js';\n\n/**\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\n */\n\nexport default class TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t * @returns {string} The scope where items defaults were registered to.\n\t */\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      // Make sure the parent is registered and note the scope where its defaults are.\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      // already registered\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object?}\n\t */\n  get(id) {\n    return this.items[id];\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t */\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  // Inherit the parent's defaults and keep existing defaults\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n","import DatasetController from './core.datasetController.js';\nimport Element from './core.element.js';\nimport Scale from './core.scale.js';\nimport TypedRegistry from './core.typedRegistry.js';\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core.js';\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    // Order is important, Scale has Element in prototype chain,\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof DatasetController}\n\t */\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Element}\n\t */\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object}\n\t */\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Scale}\n\t */\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  /**\n\t * @private\n\t */\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        // Handle loopable args\n        // Use case:\n        //  import * as plugins from './plugins.js';\n        //  Chart.register(plugins);\n        each(arg, item => {\n          // If there are mixed types in the loopable, make sure those are\n          // registered in correct registry\n          // Use case: (treemap exporting controller, elements etc)\n          //  import * as treemap from 'chartjs-chart-treemap.js';\n          //  Chart.register(treemap);\n\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\n    registry[method](component);\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\n  }\n\n  /**\n\t * @private\n\t */\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    // plugins is the fallback registry\n    return this.plugins;\n  }\n\n  /**\n\t * @private\n\t */\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Registry();\n","import registry from './core.registry.js';\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip\n */\n\n/**\n * @callback filterCallback\n * @param {{plugin: object, options: object}} value\n * @param {number} [index]\n * @param {array} [array]\n * @param {object} [thisArg]\n * @return {boolean}\n */\n\n\nexport default class PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  /**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    // When plugins are registered, there is the possibility of a double\n    // invalidate situation. In this case, we only want to invalidate once.\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\n    // plugins are restarted without being correctly stopped.\n    // See https://github.com/chartjs/Chart.js/issues/8147\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    // options === false => all plugins are disabled\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\n\n/**\n * @param {import('./core.config.js').default} config\n */\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {plugins, localIds};\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\n\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    // make sure plugin defaults are in scopes for local (not registered) plugins\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    // These are just defaults that plugins can override\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n","import defaults, {overrides, descriptors} from './core.defaults.js';\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core.js';\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config.js';\n\nexport function getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nexport function determineAxis(id, ...scaleOptions) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (const opts of scaleOptions) {\n    const axis = opts.axis\n      || axisFromPosition(opts.position)\n      || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {axis};\n  }\n}\n\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter((d) => d.xAxisID === id || d.yAxisID === id);\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n\n  // First figure out first scale id's per axis.\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n\n  // Then merge dataset defaults to scale configs\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n\n  // apply scale defaults, if not overridden by dataset defaults\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n\n  initOptions(config);\n\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nexport default class Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @return {string[][]}\n   */\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset animation options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @param {string} transition\n   * @return {string[][]}\n   */\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        // The following are used for looking up the `animations` and `animation` keys\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving element options that belong\n   * to an dataset. These keys do not include the dataset itself, because it\n   * is not under options.\n   * @param {string} datasetType\n   * @param {string} elementType\n   * @return {string[][]}\n   */\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving plugin options.\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\n   * @return {string[][]}\n   */\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n\n  /**\n   * @private\n   */\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n\n  /**\n   * Resolves the objects from options and defaults for option value resolution.\n   * @param {object} mainScope - The main scope object for options\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\n   */\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n\n  /**\n   * Returns the option scopes for resolving chart options\n   * @return {object[]}\n   */\n  chartOptionScopes() {\n    const {options, type} = this;\n\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {string[]} names\n   * @param {function|object} context\n   * @param {string[]} [prefixes]\n   * @return {object}\n   */\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {object} [context]\n   * @param {string[]} [prefixes]\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\n   */\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\n\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).some((key) => isFunction(value[key]));\n\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n","import animator from './core.animator.js';\nimport defaults, {overrides} from './core.defaults.js';\nimport Interaction from './core.interaction.js';\nimport layouts from './core.layouts.js';\nimport {_detectPlatform} from '../platform/index.js';\nimport PluginService from './core.plugins.js';\nimport registry from './core.registry.js';\nimport Config, {determineAxis, getIndexAxis} from './core.config.js';\nimport {retinaScale, _isDomSupported} from '../helpers/helpers.dom.js';\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core.js';\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea} from '../helpers/index.js';\n// @ts-ignore\nimport {version} from '../../package.json';\nimport {debounce} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').Point } Point\n */\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\n\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n\n  chart.notifyPlugins('afterRender');\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\n/**\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\n */\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    // Support for array based queries (such as jQuery)\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    // Support for any object associated to a canvas (including a context2d)\n    item = item.canvas;\n  }\n  return item;\n}\n\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\n/**\n * @param {ChartEvent} e\n * @param {ChartEvent|null} lastEvent\n * @param {boolean} inChartArea\n * @param {boolean} isClick\n * @returns {ChartEvent|null}\n */\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\n\nfunction getSizeForArea(scale, chartArea, field) {\n  return scale.options.clip ? scale[field] : chartArea[field];\n}\n\nfunction getDatasetArea(meta, chartArea) {\n  const {xScale, yScale} = meta;\n  if (xScale && yScale) {\n    return {\n      left: getSizeForArea(xScale, chartArea, 'left'),\n      right: getSizeForArea(xScale, chartArea, 'right'),\n      top: getSizeForArea(yScale, chartArea, 'top'),\n      bottom: getSizeForArea(yScale, chartArea, 'bottom')\n    };\n  }\n  return chartArea;\n}\n\nclass Chart {\n\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  // eslint-disable-next-line max-statements\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    // Store the previously used aspect ratio to determine if a resize\n    // is needed during updates. Do this after _options is set since\n    // aspectRatio uses a getter\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n\n    // Add the chart instance to the global namespace\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      // The given item is not a compatible context2d element, let's return before finalizing\n      // the chart initialization but after setting basic chart / controller properties that\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n      // https://github.com/chartjs/Chart.js/issues/2807\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      // If aspectRatio is defined in options, use that.\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\n      return _aspectRatio;\n    }\n\n    // Calculate\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  /**\n\t * @private\n\t */\n  _initialize() {\n    // Before init plugin notification\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n\n    // After init plugin notification\n    this.notifyPlugins('afterInit');\n\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  /**\n\t * Resize the chart to its container or to explicit dimensions.\n\t * @param {number} [width]\n\t * @param {number} [height]\n\t */\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {size: newSize});\n\n    callCallback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        // The resize update is delayed, only draw without updating.\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  /**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    // clear up discarded scales\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  /**\n\t * @private\n\t */\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n    return newControllers;\n  }\n\n  /**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  /**\n\t* Resets the chart back to its state before the initial animation\n\t*/\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n\n    // plugins options references might have change, let's invalidate the cache\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    // Make sure dataset controllers are updated and new controllers are reset\n    const newControllers = this.buildOrUpdateControllers();\n\n    this.notifyPlugins('beforeElementsUpdate');\n\n    // Make sure all dataset controllers have correct meta data counts\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      // New controllers will be reset after the layout pass, so we only want to modify\n      // elements added to new datasets\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n\n    // Only reset the controllers if we have animations\n    if (!animsDisabled) {\n      // Can only reset the new controllers after the scales have been updated\n      // Reset is done to get the starting point for the initial animation\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    // Do this before render so that any plugins that need final scale updates can use it\n    this.notifyPlugins('afterUpdate', {mode});\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    // Replay last event from before update, or set hover styles on active elements\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  /**\n   * @private\n   */\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      // The configured events have changed. Rebind.\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n\n  /**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\n        return;\n      }\n\n      // configure is called twice, once in core.scale.update and once here.\n      // Here the boxes are fully updated and at their final positions.\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  /**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n\n  /**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      // Unset pending resize request now to avoid possible recursion within _resize\n      this._resizeBeforeDraw = null;\n      this._resize(width, height);\n    }\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n    // currently be part of layers. Instead, we draw\n    // layers <= 0 before(default, backward compat), and the rest after\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    // Rest of layers\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  /**\n\t * @private\n\t */\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n\t * Gets the visible dataset metas in drawing order\n\t * @return {object[]}\n\t */\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  /**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  /**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta, this.chartArea);\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n\n    meta.controller.draw();\n\n    if (useClip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  /**\n   * Checks whether the given point is in the chart area.\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\n   * @returns {boolean}\n   */\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\t\t\t// See isDatasetVisible() comment\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  /**\n\t * @private\n\t */\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  /**\n\t * @private\n\t */\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n\n    this._stop();\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  /**\n\t * @private\n\t */\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  /**\n   * @private\n   */\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, (type) => _add(type, listener));\n  }\n\n  /**\n   * @private\n   */\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached; // eslint-disable-line prefer-const\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\n      this._stop();\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  /**\n\t * Get active (hovered) elements\n\t * @returns array\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active (hovered) elements\n\t * @param {array} activeElements New active data points\n\t */\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      // Make sure we don't use the previous mouse event to override the active elements in update.\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  /**\n\t * Calls enabled plugins on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\n   * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  /**\n   * Check if a plugin with the specific ID is registered and enabled\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\n   * @returns {boolean}\n   */\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e the event to handle\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\n\t * @return {boolean} true if the chart needs to re-render\n\t * @private\n\t */\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n\n    // If the event is replayed from `update`, we should evaluate with the final positions.\n    //\n    // The `replay`:\n    // It's the last event (excluding click) that has occurred before `update`.\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\n    //\n    // The why:\n    // If animations are active, the elements haven't moved yet compared to state before update.\n    // But if they will, we are activating the elements that would be active, if this check\n    // was done after the animations have completed. => \"final positions\".\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\n    // This is done so we do not have to evaluate the active elements each animation frame\n    // - it would be expensive.\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      // Set _lastEvent to null while we are processing the event handlers.\n      // This prevents recursion if the handler calls chart.update()\n      this._lastEvent = null;\n\n      // Invoke onHover hook\n      callCallback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callCallback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n\n    return changed;\n  }\n\n  /**\n   * @param {ChartEvent} e - The event\n   * @param {import('../types/index.js').ActiveElement[]} lastActive - Previously active elements\n   * @param {boolean} inChartArea - Is the event inside chartArea\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\n   * @returns {import('../types/index.js').ActiveElement[]} - The active elements\n   * @pravate\n   */\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n\n// @ts-ignore\nfunction invalidatePlugins() {\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\n}\n\nexport default Chart;\n","import Element from '../core/core.element.js';\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index.js';\nimport {PI, _isBetween, _limitValue} from '../helpers/helpers.math.js';\nimport {_readValueToProps} from '../helpers/helpers.options.js';\nimport type {ArcOptions, Point} from '../types/index.js';\n\n\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\n\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\n\n\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  end: number,\n  circular: boolean,\n) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\n\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\n\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference, options} = element;\n  const {borderWidth, borderJoinStyle, borderDash, borderDashOffset} = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nexport interface ArcProps extends Point {\n  startAngle: number;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n  circumference: number;\n}\n\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\n\n  static id = 'arc';\n\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n  };\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash'\n  };\n\n  circumference: number;\n  endAngle: number;\n  fullCircles: number;\n  innerRadius: number;\n  outerRadius: number;\n  pixelMargin: number;\n  startAngle: number;\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n    const betweenAngles = _circumference >= TAU || nonZeroBetween;\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return (betweenAngles && withinRadius);\n  }\n\n  getCenterPoint(useFinalPosition: boolean) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius'\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition: boolean) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n\n    ctx.restore();\n  }\n}\n","import Element from '../core/core.element.js';\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation.js';\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment.js';\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas.js';\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve.js';\nimport {valueOrDefault} from '../helpers/index.js';\n\n/**\n * @typedef { import('./element.point.js').default } PointElement\n */\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\n/**\n * @returns {any}\n */\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  // eslint-disable-next-line prefer-const\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      // Draw line to maxY and minY, using the average x-coordinate\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      // Line to y-value of last point in group. So the line continues\n      // from correct position. Not using move, to have solid path.\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0; // truncated x-coordinate\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      // Draw line to next x-position, using the first (or only)\n      // y-value in that group\n      ctx.lineTo(x, y);\n\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    // Keep track of the last y-value in group\n    lastY = y;\n  }\n  drawX();\n}\n\n/**\n * @param {LineElement} line - the line\n * @returns {function}\n * @private\n */\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\n/**\n * @private\n */\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nexport default class LineElement extends Element {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n  };\n\n\n  constructor(cfg) {\n    super();\n\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  /**\n\t * First non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  /**\n\t * Last non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  /**\n\t * Interpolate a point in this line at the same value on `property` as\n\t * the reference `point` provided\n\t * @param {PointElement} point - the reference point\n\t * @param {string} property - the property to match on\n\t * @returns {PointElement|undefined}\n\t */\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n\n  /**\n\t * Append a segment of this line to current path.\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} segment\n\t * @param {number} segment.start - start index of the segment, referring the points array\n \t * @param {number} segment.end - end index of the segment, referring the points array\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\n\t * @param {object} params\n\t * @param {boolean} params.move - move to starting point (vs line to it)\n\t * @param {boolean} params.reverse - path the segment from end to start\n\t * @param {number} params.start - limit segment to points starting from `start` index\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\n\t */\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  /**\n\t * Append all segments of this line to current path.\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\n\t */\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n\n    start = start || 0;\n    count = count || (this.points.length - start);\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n\n  /**\n\t * Draw\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} chartArea\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t */\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n\n      draw(ctx, this, start, count);\n\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      // When line is animated, the control points and path are not cached.\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n","import Element from '../core/core.element.js';\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport type {\n  CartesianParsedData,\n  ChartArea,\n  Point,\n  PointHoverOptions,\n  PointOptions,\n} from '../types/index.js';\n\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\n\nexport type PointProps = Point\n\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\n\n  static id = 'point';\n\n  parsed: CartesianParsedData;\n  skip?: boolean;\n  stop?: boolean;\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition?: boolean) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n","import Element from '../core/core.element.js';\nimport {isObject, _isBetween, _limitValue} from '../helpers/index.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options.js';\n\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param {BarElement} bar the bar\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the bar\n * @private\n */\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\n\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {left, top, right, bottom};\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n\n  // If the value is an object, assume the user knows what they are doing\n  // and apply as directed.\n  const enableBorder = enableBorderRadius || isObject(value);\n\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\n/**\n * Add a path of a rectangle to the current sub-path\n * @param {CanvasRenderingContext2D} ctx Context\n * @param {*} rect Bounding rect\n */\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nexport default class BarElement extends Element {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n","import {DoughnutController, PolarAreaController, defaults} from '../index.js';\nimport type {Chart, ChartDataset} from '../types.js';\n\nexport interface ColorsPluginOptions {\n  enabled?: boolean;\n  forceOverride?: boolean;\n}\n\ninterface ColorsDescriptor {\n  backgroundColor?: unknown;\n  borderColor?: unknown;\n}\n\nconst BORDER_COLORS = [\n  'rgb(54, 162, 235)', // blue\n  'rgb(255, 99, 132)', // red\n  'rgb(255, 159, 64)', // orange\n  'rgb(255, 205, 86)', // yellow\n  'rgb(75, 192, 192)', // green\n  'rgb(153, 102, 255)', // purple\n  'rgb(201, 203, 207)' // grey\n];\n\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i: number) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i: number) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset: ChartDataset, i: number) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n\n  return i;\n}\n\nfunction getColorizer(chart: Chart) {\n  let i = 0;\n\n  return (dataset: ChartDataset, datasetIndex: number) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\n) {\n  let k: number | string;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(\n  descriptor: ColorsDescriptor\n) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nfunction containsDefaultColorsDefenitions() {\n  return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\n\nexport default {\n  id: 'colors',\n\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  } as ColorsPluginOptions,\n\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {datasets},\n      options: chartOptions\n    } = chart.config;\n    const {elements} = chartOptions;\n\n    const containsColorDefenition = (\n      containsColorsDefinitions(datasets) ||\n      containsColorsDefinition(chartOptions) ||\n      (elements && containsColorsDefinitions(elements)) ||\n      containsDefaultColorsDefenitions());\n\n    if (!options.forceOverride && containsColorDefenition) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n\n    datasets.forEach(colorizer);\n  }\n};\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers/index.js';\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  /**\n   * Implementation of the Largest Triangle Three Buckets algorithm.\n   *\n   * This implementation is based on the original implementation by Sveinn Steinarsson\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\n   *\n   * The original implementation is MIT licensed.\n   */\n  const samples = options.samples || availableWidth;\n  // There are less points than the threshold, returning the whole array\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  // Starting from offset\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n\n    // Adding offset\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n\n    // Adding offset\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n\n    // Note that this is changed from the original algorithm which initializes these\n    // values to 1. The reason for this change is that if the area is small, nextA\n    // would never be set and thus a crash would occur in the next loop as `a` would become\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\n    // initializing with a negative number is the correct solution.\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  // Include the last point\n  decimated[sampledIndex++] = data[endIndex];\n\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      // Use point.x here because we're computing the average data `x` value\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        // The interval is defined by 4 points: start, min, max, end.\n        // The starting point is already considered at this point, so we need to determine which\n        // of the other points to add. We need to sort these points to ensure the decimated data\n        // is still sorted and then ensure there are no duplicates.\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      // lastIndex === startIndex will occur when a range has only 1 point which could\n      // happen with very uneven data\n      if (i > 0 && lastIndex !== startIndex) {\n        // Last point in the previous interval\n        decimated.push(data[lastIndex]);\n      }\n\n      // Start of the new interval\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data,\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count;\n\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {start, count};\n}\n\nexport default {\n  id: 'decimation',\n\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    // Assume the entire chart is available to show a few more points than needed\n    const availableWidth = chart.width;\n\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        // Decimation is only supported for lines that have an X indexAxis\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        // Only line datasets are supported\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        // Only linear interpolation is supported\n        return;\n      }\n\n      if (chart.options.parsing) {\n        // Plugin only supports data that does not need parsing\n        return;\n      }\n\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        // No decimation is required until we are above this threshold\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        // First time we are seeing this dataset\n        // We override the 'data' property with a setter that stores the\n        // raw data in _data, but reads the decimated data from _decimated\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n\n      // Point the chart to the decimated data\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers/index.js';\n\nexport function _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      // Special case for boundary not supporting `segments` (simpleArc)\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\n\nexport function _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\n\nexport function _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\n\nexport function _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {isArray} from '../../helpers/index.js';\nimport {_pointsFromSegments} from './filler.segment.js';\n\n/**\n * @param {PointElement[] | { x: number; y: number; }} boundary\n * @param {LineElement} line\n * @return {LineElement?}\n */\nexport function _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    // @ts-ignore\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nexport function _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.line.js').default } LineElement\n * @typedef { import('../../types/index.js').FillTarget } FillTarget\n * @typedef { import('../../types/index.js').ComplexFillTarget } ComplexFillTarget\n */\n\nexport function _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\n/**\n * @param {LineElement} line\n * @param {number} index\n * @param {number} count\n */\nexport function _decodeFill(line, index, count) {\n  /** @type {string | {value: number}} */\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @returns {number | null}\n */\nexport function _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @param {number} startValue\n * @returns {number | undefined}\n */\nexport function _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\n\n/**\n * @param {LineElement} line\n */\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {_isBetween} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\n\n/**\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\n * @return {LineElement}\n */\nexport function _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @return {LineElement[]}\n */\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\n\n/**\n * @param {PointElement[]} points\n * @param {PointElement} sourcePoint\n * @param {LineElement[]} linesBelow\n */\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      // First point of an segment -> need to add another point before this,\n      // from next line below.\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        // In the middle of an segment, no need to add more points.\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\n\n/**\n * @param {LineElement} line\n * @param {PointElement} sourcePoint\n * @param {string} property\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\n */\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n","import {TAU} from '../../helpers/index.js';\n\n// TODO: use elements.ArcElement instead\nexport class simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n","import {isFinite} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\nimport {_getTargetPixel, _getTargetValue} from './filler.options.js';\nimport {_buildStackLine} from './filler.target.stack.js';\nimport {simpleArc} from './simpleArc.js';\n\n/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nexport function _getTarget(source) {\n  const {chart, fill, line} = source;\n\n  if (isFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\n/**\n * @param {Chart} chart\n * @param {number} index\n */\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\n\n\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\n","import {clipArea, unclipArea} from '../../helpers/index.js';\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment.js';\nimport {_getTarget} from './filler.target.js';\n\nexport function _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {line, target, color: below, scale, property});\n\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n\n    ctx.beginPath();\n\n    const lineLoop = !!line.pathSegment(ctx, src);\n\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\n","/**\n * Plugin based on discussion from the following Chart.js issues:\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\n */\n\nimport LineElement from '../../elements/element.line.js';\nimport {_drawfill} from './filler.drawing.js';\nimport {_shouldApplyFill} from './filler.helper.js';\nimport {_decodeFill, _resolveTarget} from './filler.options.js';\n\nexport default {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n","import defaults from '../core/core.defaults.js';\nimport Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas.js';\nimport {\n  _isBetween,\n  callback as call,\n  clipArea,\n  getRtlAdapter,\n  overrideTextDirection,\n  restoreTextDirection,\n  toFont,\n  toPadding,\n  unclipArea,\n  valueOrDefault,\n} from '../helpers/index.js';\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {toTRBLCorners} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n */\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nexport class Legend extends Element {\n\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this._added = false;\n\n    // Contains hit boxes for each dataset (in dataset order)\n    this.legendHitBoxes = [];\n\n    /**\n \t\t * @private\n \t\t */\n    this._hoveredItem = null;\n\n    // Are we in doughnut mode which has a different data type\n    this.doughnutMode = false;\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {options, ctx} = this;\n\n    // The legend may not be displayed for a variety of reasons including\n    // the fact that the defaults got set to `false`.\n    // When the legend is not displayed, there are no guarantees that the options\n    // are correctly formatted so we need to bail out as early as possible.\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    let width, height;\n\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth; // fill all the width\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight; // fill all the height\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  /**\n\t * @private\n\t */\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n\n    let left = 0;\n    let col = 0;\n\n    this.legendItems.forEach((legendItem, i) => {\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      // If too tall, go to new column\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      // Store the hitbox width and height here. Final position will be updated in `draw`\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n\n      // Get max width\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n\n    this.drawTitle();\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    // current position\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      // Set the ctx for the box\n      ctx.save();\n\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        // Recalculate x and y for drawPoint() because its expecting\n        // x and y to be center of figure (instead of top left)\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n\n        // Draw pointStyle as legend symbol\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        // Draw box as legend symbol\n        // Adjust position when boxHeight < fontSize (want it centered)\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    // Horizontal\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\n\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n\n      drawLegendBox(realX, y, legendItem);\n\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n\n      // Fill the actual label\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n\n    // These defaults are used when the legend is vertical.\n    // When horizontal, they are computed below.\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      // Move left / right so that the title is above the legend lines\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      // Move down so that the title is above the legend stack in every alignment\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    // Now that we know the left edge of the inner legend box, compute the correct\n    // X coordinate from the title alignment\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  /**\n\t * @private\n\t */\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      // See if we are touching one of the dataset boxes\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          // Touching an element\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t */\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    // Chart event already has relative position in it\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        call(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        call(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      call(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {itemWidth, itemHeight};\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\n\nexport default {\n  id: 'legend',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  // During the beforeUpdate step, the layout configuration needs to run\n  // This ensures that if the legend position changes (via an option update)\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  // The labels need to be built after datasets are updated to ensure that colors\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    // a callback that will handle\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      // Generates labels shown in the legend\n      // Valid properties to return:\n      // text : text to display\n      // fillStyle : fill of coloured box\n      // strokeStyle: stroke of coloured box\n      // hidden : if this legend item refers to a hidden item\n      // lineCap : cap style for line\n      // lineDash\n      // lineDashOffset :\n      // lineJoin :\n      // lineWidth :\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\n\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n\n            // Below is extra data used for toggling the datasets\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n","import Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {PI, isArray, toPadding, toFont} from '../helpers/index.js';\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras.js';\nimport {renderText} from '../helpers/helpers.canvas.js';\n\nexport class Title extends Element {\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nexport default {\n  id: 'title',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000         // by default greater than legend (1000) to be above\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import {Title} from './plugin.title.js';\nimport layouts from '../core/core.layouts.js';\n\nconst map = new WeakMap();\n\nexport default {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import Animations from '../core/core.animations.js';\nimport Element from '../core/core.element.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core.js';\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl.js';\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math.js';\nimport {createContext, drawPoint} from '../helpers/index.js';\n\n/**\n * @typedef { import('../platform/platform.base.js').Chart } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').ActiveElement } ActiveElement\n * @typedef { import('../core/core.interaction.js').InteractionItem } InteractionItem\n */\n\nconst positioners = {\n  /**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t */\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let xSet = new Set();\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        xSet.add(pos.x);\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    // No visible items where found, return false so we don't have to divide by 0 which reduces in NaN\n    if (count === 0 || xSet.size === 0) {\n      return false;\n    }\n\n    const xAverage = [...xSet].reduce((a, b) => a + b) / xSet.size;\n\n    return {\n      x: xAverage,\n      y: y / count\n    };\n  },\n\n  /**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t */\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      // base = base.concat(toPush);\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {*} str - The value to split by newline.\n * @returns {string|string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param {Chart} chart\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n\n  // Count of all lines in the body\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    // Body lines may include some extra height depending on boxHeight\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  // Title width\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n\n  // Body width\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n\n  // Body lines may include some extra width due to the color box\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n\n  // Reset back to 0\n  widthPadding = 0;\n\n  // Footer width\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n\n  ctx.restore();\n\n  // Add padding\n  width += padding.width;\n\n  return {width, height};\n}\n\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  // eslint-disable-next-line prefer-const\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  // Args are: (tooltipItems, data)\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n  afterTitle: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeBody: noop,\n\n  // Args are: (tooltipItem, data)\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0,\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation,\n    };\n  },\n  afterLabel: noop,\n\n  // Args are: (tooltipItems, data)\n  afterBody: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\n/**\n * Invoke callback from object with context and arguments.\n * If callback returns `undefined`, then will be invoked default callback.\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\n * @param {keyof typeof defaultCallbacks} name\n * @param {*} ctx\n * @param {*} arg\n * @returns {any}\n */\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nexport class Tooltip extends Element {\n\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\n    // and `labelTextColors` to create a single variable\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {callbacks} = options;\n\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\n    );\n  }\n\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n\n      bodyItems.push(bodyItem);\n    });\n\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\n    );\n  }\n\n  // Get the footer and beforeFooter and afterFooter lines\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n    return lines;\n  }\n\n  /**\n\t * @private\n\t */\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    // If the user provided a filter function, use it to modify the tooltip items\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    // If the user provided a sorting function, use it to modify the tooltip items\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    // Determine colors for boxes\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n\n        // Left draws bottom -> top, this y1 is on the bottom\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n\n        // Right draws top -> bottom, thus y1 is on the top\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n\n        // Top draws left -> right, thus x1 is on the left\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n\n        // Bottom draws right -> left, thus x1 is on the right\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.titleAlign, options);\n\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n        }\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      // Recalculate x and y for drawPoint() because its expecting\n      // x and y to be center of figure (instead of top left)\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n\n      // Draw the point\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      // Border\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : (labelColor.borderWidth || 1); // TODO, v4 remove fallback\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        // Normal rect\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    // restore fillStyle\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n\n    // Before body lines\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n\n    // Draw body lines now\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n\n      lines = bodyItem.lines;\n      // Draw Legend-like boxes if needed\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        // Reset for any lines that don't include colorbox\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    // Reset back to 0 for after body\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n\n    // After body lines\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing; // Remove last body spacing\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n\n      footerFont = toFont(options.footerFont);\n\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  /**\n\t * Update x/y animation targets when _active elements are animating too\n\t * @private\n\t */\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  /**\n   * Determine if the tooltip will draw anything\n   * @returns {boolean} True if the tooltip will render\n   */\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n\n    // IE11/Edge does not like very small opacities, so snap to 0\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n\n    const padding = toPadding(options.padding);\n\n    // Truthy/falsey value for empty tooltip\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n\n      // Draw Background\n      this.drawBackground(pt, ctx, tooltipSize, options);\n\n      overrideTextDirection(ctx, options.textDirection);\n\n      pt.y += padding.top;\n\n      // Titles\n      this.drawTitle(pt, ctx, options);\n\n      // Body\n      this.drawBody(pt, ctx, options);\n\n      // Footer\n      this.drawFooter(pt, ctx, options);\n\n      restoreTextDirection(ctx, options.textDirection);\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * Get active elements in the tooltip\n\t * @returns {Array} Array of elements that are active in the tooltip\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active elements in the tooltip\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\n\t * @param {object} eventPosition Synthetic event position used in positioning\n\t */\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {boolean} true if the tooltip changed\n\t */\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    // When there are multiple items shown, but the tooltip position is nearest mode\n    // an update may need to be made because our position may have changed even though\n    // the items are the same as before.\n    const positionChanged = this._positionChanged(active, e);\n\n    // Remember Last Actives\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    // Only handle target event on tooltip change\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n\t * Helper for determining the active elements for event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {InteractionItem[]} lastActive - Previously active elements\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {InteractionItem[]} - Active elements\n\t * @private\n\t */\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      // But make sure that active elements are still valid.\n      return lastActive.filter(i =>\n        this.chart.data.datasets[i.datasetIndex] &&\n        this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined\n      );\n    }\n\n    // Find Active Elements for tooltips\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  /**\n\t * Determine if the active elements + event combination changes the\n\t * tooltip position\n\t * @param {array} active - Active elements\n\t * @param {ChartEvent} e - Event that triggered the position change\n\t * @returns {boolean} True if the position has changed\n\t */\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n\nexport default {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      // If the event is replayed from `update`, we should evaluate with the final positions.\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        // notify chart about the change, so it will render\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n\n  // Resolve additionally from `interaction` options and defaults.\n  additionalOptionScopes: ['interaction']\n};\n","import Scale from '../core/core.scale.js';\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers/index.js';\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\n\nexport default class CategoryScale extends Scale {\n\n  static id = 'category';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n\n    // If we are viewing some subset of labels, slice the original array\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      // For backward compatibility, vertical category scale reverse is inverted.\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  // Used to get data value locations. Value can either be an index or a numerical value\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  // Must override base implementation because it calls getPixelForValue\n  // and category scale can have duplicate values\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n","import {isNullOrUndef} from '../helpers/helpers.core.js';\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\n\n/**\n * Generate a set of linear ticks for an axis\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\n *    Note that the generationOptions.maxCount setting is respected in this scenario\n *\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\n *    spacing = (max - min) / count\n *    Ticks are generated as [min, min + spacing, ..., max]\n *\n * 3. If generationOptions.count is defined\n *    spacing = (niceMax - niceMin) / count\n *\n * 4. Compute optimal spacing of ticks using niceNum algorithm\n *\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, dataRange) {\n  const ticks = [];\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n  // for details.\n\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  // Beyond MIN_SPACING floating point numbers being to lose precision\n  // such that we can't do the math necessary to generate ticks\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    // If the user specified a precision, round to that number of decimal places\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\n    // spacing = step;\n    // numSpaces = (max - min) / spacing;\n    // Note that we round here to handle the case where almostWhole translated an FP error\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\n    // Sometimes these are no-ops, but it makes the code a lot clearer\n    // and when a user defined range is specified, we want the correct ticks\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    // Case 4\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    // If very close to our rounded value, use it.\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\n  // until this point\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n\n      if (niceMin < min) {\n        j++; // Skip niceMin\n      }\n      // If the next nice tick is close to min, skip it\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({value: tickValue});\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    // If the previous tick is too close to max, replace it with max, else add max\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nexport default class LinearScaleBase extends Scale {\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    /** @type {number} */\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    // eslint-disable-next-line prefer-const\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  /**\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    // Figure out what the max number of ticks we can support it is based on the size of\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n    // the graph. Make sure we always have at least 2 ticks\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n","import {isFinite} from '../helpers/helpers.core.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {toRadians} from '../helpers/index.js';\n\nexport default class LinearScale extends LinearScaleBase {\n\n  static id = 'linear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? min : 0;\n    this.max = isFinite(max) ? max : 1;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n \t */\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  // Utils\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\n\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\n\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, {min, max}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({value, major: isMajor(value), significand});\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\n\n  return ticks;\n}\n\nexport default class LogarithmicScale extends Scale {\n\n  static id = 'logarithmic';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? Math.max(0, min) : null;\n    this.max = isFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (min === max) {\n      if (min <= 0) { // includes null\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const start = this.min;\n\n    super.configure();\n\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n","import defaults from '../core/core.defaults.js';\nimport {_longestText, addRoundedRectPath, renderText, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core.js';\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n  // Right, this is really confusing and there is a lot of maths going on here\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n  //\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n  //\n  // Solution:\n  //\n  // We assume the radius of the polygon is half the size of the canvas at first\n  // at each index we check if the text overlaps.\n  //\n  // Where it does, we store that angle and that index.\n  //\n  // After finding the largest index and angle we calculate how much we need to remove\n  // from the shape radius to move the point inwards by that x.\n  //\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\n  // along with labels.\n  //\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\n  //\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n  // and position it in the most space efficient manner\n  //\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n\n  // Now that text size is determined, compute the full positions\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {extra, additionalAngle, padding, size} = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    // if to draw or overlapped\n    visible: true,\n\n    // Text position\n    x: pointLabelPosition.x,\n    y,\n\n    // Text rendering data\n    textAlign,\n\n    // Bounding box\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\n\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  const {left, top, right, bottom} = item;\n  const apexesInArea = _isPointInArea({x: left, y: top}, area) || _isPointInArea({x: left, y: bottom}, area) ||\n    _isPointInArea({x: right, y: top}, area) || _isPointInArea({x: right, y: bottom}, area);\n  return !apexesInArea;\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {centerPointLabels, display} = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\n\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {left, top, right, bottom} = item;\n  const {backdropColor} = opts;\n\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius,\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      // overlapping\n      continue;\n    }\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign} = item;\n\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    // Draw circular arcs between the points\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    // Draw straight lines connecting each index\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n\n  const {color, lineWidth} = gridLineOpts;\n\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash || []);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nexport default class RadialLinearScale extends LinearScaleBase {\n\n  static id = 'radialLinear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    display: true,\n\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n\n    grid: {\n      circular: false\n    },\n\n    startAngle: 0,\n\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n\n      callback: Ticks.formatters.numeric\n    },\n\n    pointLabels: {\n      backdropColor: undefined,\n\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPadding: 2,\n\n      // Boolean - if true, show point labels\n      display: true,\n\n      // Number - Point label font size in pixels\n      font: {\n        size: 10\n      },\n\n      // Function - Used to convert point labels\n      callback(label) {\n        return label;\n      },\n\n      // Number - Additionl padding between scale and pointLabel\n      padding: 5,\n\n      // Boolean - if true, center point labels to slices in polar chart\n      centerPointLabels: false\n    }\n  };\n\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.xCenter = undefined;\n    /** @type {number} */\n    this.yCenter = undefined;\n    /** @type {number} */\n    this.drawingArea = undefined;\n    /** @type {string[]} */\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n\n    // Point labels\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    // Take into account half font size + the yPadding of the top value\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid, border} = opts;\n    const labelCount = this._pointLabels.length;\n\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0 || (index === 0 && this.min < 0)) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n\n        offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {}\n\n  /**\n\t * @protected\n\t */\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    this.ticks.forEach((tick, index) => {\n      if ((index === 0 && this.min >= 0) && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n        strokeColor: optsAtIndex.textStrokeColor,\n        strokeWidth: optsAtIndex.textStrokeWidth,\n      });\n    });\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {}\n}\n","import adapters from '../core/core.adapters.js';\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection.js';\n\n/**\n * @typedef { import('../core/core.adapters.js').TimeUnit } Unit\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\n * @typedef { import('../core/core.adapters.js').DateAdapter } DateAdapter\n */\n\n/**\n * @type {Object<Unit, Interval>}\n */\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\n\n/**\n * @type {Unit[]}\n */\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\n\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction sorter(a, b) {\n  return a - b;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {*} input\n * @return {number}\n */\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  // Only parse if it's not a timestamp already\n  if (!isFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, parser)\n      : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @param {number} capacity\n * @return {object}\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n * @param {TimeScale} scale\n * @param {number} numTicks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @return {Unit}\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\n/**\n * @param {Unit} unit\n * @return {object}\n */\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\n/**\n * @param {object} ticks\n * @param {number} time\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\n */\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\n/**\n * @param {TimeScale} scale\n * @param {object[]} ticks\n * @param {object} map\n * @param {Unit} majorUnit\n * @return {object[]}\n */\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {number[]} values\n * @param {Unit|undefined} [majorUnit]\n * @return {object[]}\n */\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  /** @type {Object<number,object>} */\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  // We set the major ticks separately from the above loop because calling startOf for every tick\n  // is expensive when there is a large number of ticks\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nexport default class TimeScale extends Scale {\n\n  static id = 'time';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n\n    adapters: {},\n    time: {\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\n      unit: false, // false == automatic or override with week, month, year, etc.\n      round: false, // none, or override with week, month, year, etc.\n      isoWeekday: false, // override week start day\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n\n      callback: false,\n\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {{data: number[], labels: number[], all: number[]}} */\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n\n    /** @type {Unit} */\n    this._unit = 'day';\n    /** @type {Unit=} */\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    /** @type {DateAdapter} */\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n\n    adapter.init(opts);\n\n    // Backward compatibility: before introducing adapter, `displayFormats` was\n    // supposed to contain *all* unit/string pairs but this can't be resolved\n    // when loading the scale (adapters are loaded afterward), so let's populate\n    // missing formats on update\n    mergeIf(time.displayFormats, adapter.formats());\n\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n\n    super.init(scaleOpts);\n\n    this._normalized = opts.normalized;\n  }\n\n  /**\n\t * @param {*} raw\n\t * @param {number?} [index]\n\t * @return {number}\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n\n    /**\n\t\t * @param {object} bounds\n\t\t */\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\n    if (!minDefined || !maxDefined) {\n      // Labels are always considered, when user did not force bounds\n      _applyBounds(this._getLabelBounds());\n\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\n      // data bounds are ignored (and don't need to be determined)\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  /**\n\t * @private\n\t */\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n\n  /**\n\t * @return {object[]}\n\t */\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    // PRIVATE\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    // Offsets for bar charts need to be handled with the auto skipped\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  /**\n\t * Returns the start and end offsets from edges in the form of {start, end}\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\n\t * They add extra margins on the both sides by scaling down the original scale.\n\t * Offsets are added when the `offset` option is true.\n\t * @param {number[]} timestamps\n\t * @protected\n\t */\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n\n  /**\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n\t * `minor` unit using the given scale time `options`.\n\t * Important: this method can return ticks outside the min and max range, it's the\n\t * responsibility of the calling code to clamp values if needed.\n\t * @protected\n\t */\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    // @ts-ignore\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    // For 'week' unit, handle the first day of week option\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    // Align first ticks on unit\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    // Prevent browser from freezing in case user options request millions of milliseconds\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    // @ts-ignore\n    return Object.keys(ticks).sort(sorter).map(x => +x);\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  /**\n\t * @param {number} value\n\t * @param {string|undefined} format\n\t * @return {string}\n\t */\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  /**\n\t * Function to format an individual tick mark\n\t * @param {number} time\n\t * @param {number} index\n\t * @param {object[]} ticks\n\t * @param {string|undefined} [format]\n\t * @return {string}\n\t * @private\n\t */\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return call(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  /**\n\t * @param {object[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  /**\n\t * @param {string} label\n\t * @return {{w:number, h:number}}\n\t * @private\n\t */\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n\n  /**\n\t * @param {number} exampleTime\n\t * @return {number}\n\t * @private\n\t */\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n\n    // pick the longest format (milliseconds) for guesstimation\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    // subtract 1 - if offset then there's one less label than tick\n    // if not offset then one half label padding is added to each end leaving room for one less label\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return (this._cache.data = this.normalize(timestamps));\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n\n  /**\n\t * @param {number[]} values\n\t * @protected\n\t */\n  normalize(values) {\n    // It seems to be somewhat faster to do sorting first\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n","import TimeScale from './scale.time.js';\nimport {_lookupByKey} from '../helpers/helpers.collection.js';\n\n/**\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\n * at edges are used for the interpolation.\n * @param {object} table\n * @param {number} val\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\n * @return {object}\n */\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n\n  static id = 'timeseries';\n\n  /**\n   * @type {any}\n   */\n  static defaults = TimeScale.defaults;\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {object[]} */\n    this._table = [];\n    /** @type {number} */\n    this._minPos = undefined;\n    /** @type {number} */\n    this._tableRange = undefined;\n  }\n\n  /**\n\t * @protected\n\t */\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  /**\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n\t * @param {number[]} timestamps\n\t * @return {object[]}\n\t * @protected\n\t */\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      // only add points that breaks the scale linearity\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n\n  /**\n    * Generates all timestamps defined in the data.\n    * Important: this method can return ticks outside the min and max range, it's the\n    * responsibility of the calling code to clamp values if needed.\n    * @protected\n    */\n  _generate() {\n    const min = this.min;\n    const max = this.max;\n    let timestamps = super.getDataTimestamps();\n    if (!timestamps.includes(min) || !timestamps.length) {\n      timestamps.splice(0, 0, min);\n    }\n    if (!timestamps.includes(max) || timestamps.length === 1) {\n      timestamps.push(max);\n    }\n    return timestamps.sort((a, b) => a - b);\n  }\n\n  /**\n\t * Returns all timestamps\n\t * @return {number[]}\n\t * @private\n\t */\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      // If combining labels and data (data might not contain all labels),\n      // we need to recheck uniqueness and sort\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n\n    return timestamps;\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n\nexport default TimeSeriesScale;\n","export * from './controllers/index.js';\nexport * from './core/index.js';\nexport * from './elements/index.js';\nexport * from './platform/index.js';\nexport * from './plugins/index.js';\nexport * from './scales/index.js';\n\nimport * as controllers from './controllers/index.js';\nimport * as elements from './elements/index.js';\nimport * as plugins from './plugins/index.js';\nimport * as scales from './scales/index.js';\n\nexport {\n  controllers,\n  elements,\n  plugins,\n  scales,\n};\n\nexport const registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n"]},"metadata":{},"sourceType":"module"}