{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\satar\\\\OneDrive\\\\Desktop\\\\SANSERA PROJECT\\\\CODE\\\\1_RAW_MATERIALS_PHASE\\\\PREVIOUS_TEAM_IMPLEMENTATION\\\\Cost-Estimation-for-Aerospace\\\\src\\\\components\\\\History\\\\History.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport * as XLSX from 'xlsx'; // Use the correct import for XLSX\n\nimport { useTable } from 'react-table';\nimport './History.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst History = () => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [columns, setColumns] = useState([]);\n  useEffect(() => {\n    // Load and parse the Excel file\n    const loadExcelFile = async () => {\n      const filePath = require('./RM Details-SAP.xlsx'); // Path to your Excel file\n\n\n      const response = await fetch(filePath);\n      const arrayBuffer = await response.arrayBuffer();\n      const workbook = XLSX.read(arrayBuffer, {\n        type: 'array'\n      }); // Assume the first sheet contains the data\n\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n      const jsonData = XLSX.utils.sheet_to_json(sheet); // Set up columns and data\n\n      const columns = Object.keys(jsonData[0]).map(key => ({\n        Header: key,\n        accessor: key\n      }));\n      setColumns(columns);\n      setData(jsonData);\n    };\n\n    loadExcelFile();\n  }, []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"history-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"History Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-container\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n            children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n              children: column.render('Header')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n          children: rows.map(row => {\n            prepareRow(row);\n            return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n              children: row.cells.map(cell => /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                children: cell.render('Cell')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(History, \"7h2El2QWksFyjZq43TOQsX1AG6A=\", false, function () {\n  return [useTable];\n});\n\n_c = History;\nexport default History;\n\nvar _c;\n\n$RefreshReg$(_c, \"History\");","map":{"version":3,"sources":["C:/Users/satar/OneDrive/Desktop/SANSERA PROJECT/CODE/1_RAW_MATERIALS_PHASE/PREVIOUS_TEAM_IMPLEMENTATION/Cost-Estimation-for-Aerospace/src/components/History/History.jsx"],"names":["React","useEffect","useState","XLSX","useTable","History","data","setData","columns","setColumns","loadExcelFile","filePath","require","response","fetch","arrayBuffer","workbook","read","type","sheetName","SheetNames","sheet","Sheets","jsonData","utils","sheet_to_json","Object","keys","map","key","Header","accessor","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport * as XLSX from 'xlsx'; // Use the correct import for XLSX\r\nimport { useTable } from 'react-table';\r\nimport './History.css';\r\n\r\nconst History = () => {\r\n  const [data, setData] = useState([]);\r\n  const [columns, setColumns] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Load and parse the Excel file\r\n    const loadExcelFile = async () => {\r\n      const filePath = require('./RM Details-SAP.xlsx'); // Path to your Excel file\r\n      const response = await fetch(filePath);\r\n      const arrayBuffer = await response.arrayBuffer();\r\n      const workbook = XLSX.read(arrayBuffer, { type: 'array' });\r\n\r\n      // Assume the first sheet contains the data\r\n      const sheetName = workbook.SheetNames[0];\r\n      const sheet = workbook.Sheets[sheetName];\r\n      const jsonData = XLSX.utils.sheet_to_json(sheet);\r\n\r\n      // Set up columns and data\r\n      const columns = Object.keys(jsonData[0]).map(key => ({\r\n        Header: key,\r\n        accessor: key\r\n      }));\r\n\r\n      setColumns(columns);\r\n      setData(jsonData);\r\n    };\r\n\r\n    loadExcelFile();\r\n  }, []);\r\n\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable({ columns, data });\r\n\r\n  return (\r\n    <div className=\"history-container\">\r\n      <h1>History Information</h1>\r\n      <div className=\"table-container\">\r\n        <table {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.map(headerGroup => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                  <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {rows.map(row => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map(cell => (\r\n                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                  ))}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default History;\r\n"]},"metadata":{},"sourceType":"module"}