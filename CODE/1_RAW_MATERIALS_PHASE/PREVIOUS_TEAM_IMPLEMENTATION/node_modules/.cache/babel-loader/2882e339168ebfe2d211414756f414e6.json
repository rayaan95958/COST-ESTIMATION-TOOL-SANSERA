{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\satar\\\\OneDrive\\\\Desktop\\\\SANSERA PROJECT\\\\CODE\\\\1_RAW_MATERIALS_PHASE\\\\PREVIOUS_TEAM_IMPLEMENTATION\\\\Cost-Estimation-for-Aerospace\\\\src\\\\components\\\\ParttoRM\\\\ParttoRM.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./ParttoRM.css\"; // Form component to collect necessary inputs and make predictions\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ParttoRM = _ref => {\n  _s();\n\n  let {\n    setPredictedRM,\n    setSelectedForm\n  } = _ref;\n  const [formData, setFormData] = useState({\n    length: \"\",\n    width: \"\",\n    thickness: \"\",\n    form: \"\"\n  });\n  const [localPredictedRM, setLocalPredictedRM] = useState({\n    rmThickness: \"\",\n    rmWidth: \"\",\n    rmLength: \"\"\n  }); // Define the mapping for form values\n\n  const formMapping = {\n    Round: \"RND\",\n    Flat: \"FLAT\",\n    Bar: \"BAR\",\n    Extrusion: \"EXT\",\n    Plate: \"PLATE\",\n    Sheet: \"SHEET\"\n  }; // Update form data when input changes\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevData => ({ ...prevData,\n      [name]: value\n    })); // If the form changes, update the selected form in App.js\n\n    if (name === \"form\") {\n      const mappedForm = formMapping[value] || value; // Use mapped value or fallback to the original\n\n      setSelectedForm(mappedForm);\n    }\n  };\n\n  const predictRM = async () => {\n    try {\n      console.log(\"Form data being sent to the backend:\", formData); // Send form data to the backend for predicting RM dimensions\n\n      const response = await axios.post(\"http://127.0.0.1:5000/predict_rm\", formData, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      console.log(\"Response received from backend:\", response.data);\n      const {\n        rmThickness,\n        rmWidth,\n        rmLength\n      } = response.data.predicted_dimensions; // Update the local state with the predicted RM dimensions\n\n      setLocalPredictedRM({\n        rmThickness: rmThickness.toFixed(2),\n        rmWidth: rmWidth.toFixed(2),\n        rmLength: rmLength.toFixed(2)\n      }); // Update the shared state in App.js to pass to Input.jsx\n\n      setPredictedRM({\n        rmThickness: rmThickness.toFixed(2),\n        rmWidth: rmWidth.toFixed(2),\n        rmLength: rmLength.toFixed(2)\n      });\n    } catch (error) {\n      console.error(\"Error in prediction:\", error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ParttoRM\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"parttoRM-form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"form\",\n          children: \"Form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"form\",\n          name: \"form\",\n          value: formData.form,\n          onChange: handleChange,\n          className: \"parttoRM-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select form\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Round\",\n            children: \"Round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Flat\",\n            children: \"Flat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Bar\",\n            children: \"Bar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"EXT\",\n            children: \"Extrusion\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Plate\",\n            children: \"Plate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Sheet\",\n            children: \"Sheet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"parttoRM-form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"length\",\n          children: \"Length (in)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          step: \"0.01\",\n          id: \"length\",\n          name: \"length\",\n          value: formData.length,\n          onChange: handleChange,\n          placeholder: \"Enter length in inches\",\n          className: \"parttoRM-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), formData.form === \"Round\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"parttoRM-form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"width\",\n          children: \"Diameter (in)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          step: \"0.01\",\n          id: \"width\",\n          name: \"width\",\n          value: formData.width,\n          onChange: handleChange,\n          placeholder: \"Enter diameter in inches\",\n          className: \"parttoRM-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"parttoRM-form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"width\",\n            children: \"Width (in)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            step: \"0.01\",\n            id: \"width\",\n            name: \"width\",\n            value: formData.width,\n            onChange: handleChange,\n            placeholder: \"Enter width in inches\",\n            className: \"parttoRM-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"parttoRM-form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"thickness\",\n            children: \"Thickness (in)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            step: \"0.01\",\n            id: \"thickness\",\n            name: \"thickness\",\n            value: formData.thickness,\n            onChange: handleChange,\n            placeholder: \"Enter thickness in inches\",\n            className: \"parttoRM-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"parttoRM-button-group\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: predictRM,\n          className: \"parttoRM-button\",\n          children: \"Predict RM Dimensions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), localPredictedRM.rmLength && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"prediction-result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Predicted Raw Material Dimensions:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"RM Length: \", localPredictedRM.rmLength, \" in\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"RM Width: \", localPredictedRM.rmWidth, \" in\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this), formData.form !== \"Round\" && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"RM Thickness: \", localPredictedRM.rmThickness, \" in\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ParttoRM, \"YlLqVXaw4CYLu9kG5dV9sIeKh5M=\");\n\n_c = ParttoRM;\nexport default ParttoRM;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParttoRM\");","map":{"version":3,"sources":["C:/Users/satar/OneDrive/Desktop/SANSERA PROJECT/CODE/1_RAW_MATERIALS_PHASE/PREVIOUS_TEAM_IMPLEMENTATION/Cost-Estimation-for-Aerospace/src/components/ParttoRM/ParttoRM.jsx"],"names":["React","useState","axios","ParttoRM","setPredictedRM","setSelectedForm","formData","setFormData","length","width","thickness","form","localPredictedRM","setLocalPredictedRM","rmThickness","rmWidth","rmLength","formMapping","Round","Flat","Bar","Extrusion","Plate","Sheet","handleChange","e","name","value","target","prevData","mappedForm","predictRM","console","log","response","post","headers","data","predicted_dimensions","toFixed","error"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./ParttoRM.css\";\r\n\r\n// Form component to collect necessary inputs and make predictions\r\nconst ParttoRM = ({ setPredictedRM, setSelectedForm }) => {\r\n  const [formData, setFormData] = useState({\r\n    length: \"\",\r\n    width: \"\",\r\n    thickness: \"\",\r\n    form: \"\",\r\n  });\r\n\r\n  const [localPredictedRM, setLocalPredictedRM] = useState({\r\n    rmThickness: \"\",\r\n    rmWidth: \"\",\r\n    rmLength: \"\",\r\n  });\r\n  // Define the mapping for form values\r\nconst formMapping = {\r\n  Round: \"RND\",\r\n  Flat: \"FLAT\",\r\n  Bar: \"BAR\",\r\n  Extrusion: \"EXT\",\r\n  Plate: \"PLATE\",\r\n  Sheet: \"SHEET\"\r\n};\r\n\r\n  // Update form data when input changes\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [name]: value,\r\n    }));\r\n\r\n    // If the form changes, update the selected form in App.js\r\n    if (name === \"form\") {\r\n      const mappedForm = formMapping[value] || value; // Use mapped value or fallback to the original\r\n      setSelectedForm(mappedForm);\r\n\r\n    }\r\n  };\r\n\r\n  const predictRM = async () => {\r\n    try {\r\n      console.log(\"Form data being sent to the backend:\", formData);\r\n\r\n      // Send form data to the backend for predicting RM dimensions\r\n      const response = await axios.post(\"http://127.0.0.1:5000/predict_rm\", formData, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      console.log(\"Response received from backend:\", response.data);\r\n\r\n      const { rmThickness, rmWidth, rmLength } = response.data.predicted_dimensions;\r\n\r\n      // Update the local state with the predicted RM dimensions\r\n      setLocalPredictedRM({\r\n        rmThickness: rmThickness.toFixed(2),\r\n        rmWidth: rmWidth.toFixed(2),\r\n        rmLength: rmLength.toFixed(2),\r\n      });\r\n\r\n      // Update the shared state in App.js to pass to Input.jsx\r\n      setPredictedRM({\r\n        rmThickness: rmThickness.toFixed(2),\r\n        rmWidth: rmWidth.toFixed(2),\r\n        rmLength: rmLength.toFixed(2),\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error in prediction:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"ParttoRM\">\r\n      <form>\r\n        <div className=\"parttoRM-form-group\">\r\n          <label htmlFor=\"form\">Form</label>\r\n          <select\r\n            id=\"form\"\r\n            name=\"form\"\r\n            value={formData.form}\r\n            onChange={handleChange}\r\n            className=\"parttoRM-select\"\r\n          >\r\n            <option value=\"\">Select form</option>\r\n            <option value=\"Round\">Round</option>\r\n            <option value=\"Flat\">Flat</option>\r\n            <option value=\"Bar\">Bar</option>\r\n            <option value=\"EXT\">Extrusion</option>\r\n            <option value=\"Plate\">Plate</option>\r\n            <option value=\"Sheet\">Sheet</option>\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"parttoRM-form-group\">\r\n          <label htmlFor=\"length\">Length (in)</label>\r\n          <input\r\n            type=\"number\"\r\n            step=\"0.01\"\r\n            id=\"length\"\r\n            name=\"length\"\r\n            value={formData.length}\r\n            onChange={handleChange}\r\n            placeholder=\"Enter length in inches\"\r\n            className=\"parttoRM-input\"\r\n          />\r\n        </div>\r\n\r\n        {/* Show only Width as Diameter if the form is Round */}\r\n        {formData.form === \"Round\" ? (\r\n          <div className=\"parttoRM-form-group\">\r\n            <label htmlFor=\"width\">Diameter (in)</label>\r\n            <input\r\n              type=\"number\"\r\n              step=\"0.01\"\r\n              id=\"width\"\r\n              name=\"width\"\r\n              value={formData.width}\r\n              onChange={handleChange}\r\n              placeholder=\"Enter diameter in inches\"\r\n              className=\"parttoRM-input\"\r\n            />\r\n          </div>\r\n        ) : (\r\n          <>\r\n            <div className=\"parttoRM-form-group\">\r\n              <label htmlFor=\"width\">Width (in)</label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                id=\"width\"\r\n                name=\"width\"\r\n                value={formData.width}\r\n                onChange={handleChange}\r\n                placeholder=\"Enter width in inches\"\r\n                className=\"parttoRM-input\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"parttoRM-form-group\">\r\n              <label htmlFor=\"thickness\">Thickness (in)</label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                id=\"thickness\"\r\n                name=\"thickness\"\r\n                value={formData.thickness}\r\n                onChange={handleChange}\r\n                placeholder=\"Enter thickness in inches\"\r\n                className=\"parttoRM-input\"\r\n              />\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        <div className=\"parttoRM-button-group\">\r\n          <button type=\"button\" onClick={predictRM} className=\"parttoRM-button\">\r\n            Predict RM Dimensions\r\n          </button>\r\n        </div>\r\n      </form>\r\n\r\n      {localPredictedRM.rmLength && (\r\n        <div className=\"prediction-result\">\r\n          <h3>Predicted Raw Material Dimensions:</h3>\r\n          <p>RM Length: {localPredictedRM.rmLength} in</p>\r\n          <p>RM Width: {localPredictedRM.rmWidth} in</p>\r\n\r\n          {/* Only display Thickness if the form is not Round */}\r\n          {formData.form !== \"Round\" && (\r\n            <p>RM Thickness: {localPredictedRM.rmThickness} in</p>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ParttoRM;\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}