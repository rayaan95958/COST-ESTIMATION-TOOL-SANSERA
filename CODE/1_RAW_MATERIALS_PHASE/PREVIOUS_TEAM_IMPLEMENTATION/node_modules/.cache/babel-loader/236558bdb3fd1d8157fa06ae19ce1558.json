{"ast":null,"code":"import React, { forwardRef, useRef, useEffect } from 'react';\nimport { Chart as Chart$1, LineController, BarController, RadarController, DoughnutController, PolarAreaController, BubbleController, PieController, ScatterController } from 'chart.js';\nconst defaultDatasetIdKey = 'label';\n\nfunction reforwardRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nfunction setOptions(chart, nextOptions) {\n  const options = chart.options;\n\n  if (options && nextOptions) {\n    Object.assign(options, nextOptions);\n  }\n}\n\nfunction setLabels(currentData, nextLabels) {\n  currentData.labels = nextLabels;\n}\n\nfunction setDatasets(currentData, nextDatasets) {\n  let datasetIdKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultDatasetIdKey;\n  const addedDatasets = [];\n  currentData.datasets = nextDatasets.map(nextDataset => {\n    // given the new set, find it's current match\n    const currentDataset = currentData.datasets.find(dataset => dataset[datasetIdKey] === nextDataset[datasetIdKey]); // There is no original to update, so simply add new one\n\n    if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n      return { ...nextDataset\n      };\n    }\n\n    addedDatasets.push(currentDataset);\n    Object.assign(currentDataset, nextDataset);\n    return currentDataset;\n  });\n}\n\nfunction cloneData(data) {\n  let datasetIdKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultDatasetIdKey;\n  const nextData = {\n    labels: [],\n    datasets: []\n  };\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n  return nextData;\n}\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\n\n\nfunction getDatasetAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, 'dataset', {\n    intersect: true\n  }, false);\n}\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\n\n\nfunction getElementAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, 'nearest', {\n    intersect: true\n  }, false);\n}\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\n\n\nfunction getElementsAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, 'index', {\n    intersect: true\n  }, false);\n}\n\nfunction ChartComponent(props, ref) {\n  const {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...canvasProps\n  } = props;\n  const canvasRef = useRef(null);\n  const chartRef = useRef(null);\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n    chartRef.current = new Chart$1(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options: options && { ...options\n      },\n      plugins\n    });\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n  useEffect(() => {\n    if (!chartRef.current) return;\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n  useEffect(() => {\n    renderChart();\n    return () => destroyChart();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    role: \"img\",\n    height: height,\n    width: width,\n    ...canvasProps\n  }, fallbackContent);\n}\n\nconst Chart = /*#__PURE__*/forwardRef(ChartComponent);\n\nfunction createTypedChart(type, registerables) {\n  Chart$1.register(registerables);\n  return /*#__PURE__*/forwardRef((props, ref) => /*#__PURE__*/React.createElement(Chart, { ...props,\n    ref: ref,\n    type: type\n  }));\n}\n\nconst Line = /* #__PURE__ */createTypedChart('line', LineController);\nconst Bar = /* #__PURE__ */createTypedChart('bar', BarController);\nconst Radar = /* #__PURE__ */createTypedChart('radar', RadarController);\nconst Doughnut = /* #__PURE__ */createTypedChart('doughnut', DoughnutController);\nconst PolarArea = /* #__PURE__ */createTypedChart('polarArea', PolarAreaController);\nconst Bubble = /* #__PURE__ */createTypedChart('bubble', BubbleController);\nconst Pie = /* #__PURE__ */createTypedChart('pie', PieController);\nconst Scatter = /* #__PURE__ */createTypedChart('scatter', ScatterController);\nexport { Bar, Bubble, Chart, Doughnut, Line, Pie, PolarArea, Radar, Scatter, getDatasetAtEvent, getElementAtEvent, getElementsAtEvent };","map":{"version":3,"mappings":"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","names":["defaultDatasetIdKey","reforwardRef","ref","value","current","setOptions","chart","nextOptions","options","Object","assign","setLabels","currentData","nextLabels","labels","setDatasets","nextDatasets","datasetIdKey","addedDatasets","datasets","map","nextDataset","currentDataset","find","dataset","data","includes","push","cloneData","nextData","getDatasetAtEvent","event","getElementsAtEventForMode","nativeEvent","intersect","getElementAtEvent","getElementsAtEvent","ChartComponent","props","height","width","redraw","type","plugins","fallbackContent","updateMode","canvasProps","canvasRef","useRef","chartRef","renderChart","ChartJS","destroyChart","destroy","useEffect","config","setTimeout","update","React","canvas","role","Chart","forwardRef","createTypedChart","registerables","register","Line","LineController","Bar","BarController","Radar","RadarController","Doughnut","DoughnutController","PolarArea","PolarAreaController","Bubble","BubbleController","Pie","PieController","Scatter","ScatterController"],"sources":["C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\react-chartjs-2\\src\\utils.ts","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\react-chartjs-2\\src\\chart.tsx","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\node_modules\\react-chartjs-2\\src\\typedCharts.tsx"],"sourcesContent":["import type { MouseEvent } from 'react';\nimport type {\n  ChartType,\n  ChartData,\n  DefaultDataPoint,\n  ChartDataset,\n  ChartOptions,\n  Chart,\n} from 'chart.js';\n\nimport type { ForwardedRef } from './types.js';\n\nconst defaultDatasetIdKey = 'label';\n\nexport function reforwardRef<T>(ref: ForwardedRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  const options = chart.options;\n\n  if (options && nextOptions) {\n    Object.assign(options, nextOptions);\n  }\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels;\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey = defaultDatasetIdKey\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = [];\n\n  currentData.datasets = nextDatasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = currentData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      );\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset } as ChartDataset<TType, TData>;\n      }\n\n      addedDatasets.push(currentDataset);\n\n      Object.assign(currentDataset, nextDataset);\n\n      return currentDataset;\n    }\n  );\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey = defaultDatasetIdKey) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: [],\n  };\n\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n\n  return nextData;\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'dataset',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'nearest',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'index',\n    { intersect: true },\n    false\n  );\n}\n","import React, { useEffect, useRef, forwardRef } from 'react';\nimport { Chart as ChartJS } from 'chart.js';\nimport type { ChartType, DefaultDataPoint } from 'chart.js';\n\nimport type { ForwardedRef, ChartProps, BaseChartComponent } from './types.js';\nimport {\n  reforwardRef,\n  cloneData,\n  setOptions,\n  setLabels,\n  setDatasets,\n} from './utils.js';\n\nfunction ChartComponent<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(\n  props: ChartProps<TType, TData, TLabel>,\n  ref: ForwardedRef<ChartJS<TType, TData, TLabel>>\n) {\n  const {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...canvasProps\n  } = props;\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<ChartJS<TType, TData, TLabel> | null>(null);\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n\n    chartRef.current = new ChartJS(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options: options && { ...options },\n      plugins,\n    });\n\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      role='img'\n      height={height}\n      width={width}\n      {...canvasProps}\n    >\n      {fallbackContent}\n    </canvas>\n  );\n}\n\nexport const Chart = forwardRef(ChartComponent) as BaseChartComponent;\n","import React, { forwardRef } from 'react';\nimport {\n  Chart as ChartJS,\n  LineController,\n  BarController,\n  RadarController,\n  DoughnutController,\n  PolarAreaController,\n  BubbleController,\n  PieController,\n  ScatterController,\n} from 'chart.js';\nimport type { ChartType, ChartComponentLike } from 'chart.js';\n\nimport type {\n  ChartProps,\n  ChartJSOrUndefined,\n  TypedChartComponent,\n} from './types.js';\nimport { Chart } from './chart.js';\n\nfunction createTypedChart<T extends ChartType>(\n  type: T,\n  registerables: ChartComponentLike\n) {\n  ChartJS.register(registerables);\n\n  return forwardRef<ChartJSOrUndefined<T>, Omit<ChartProps<T>, 'type'>>(\n    (props, ref) => <Chart {...props} ref={ref} type={type} />\n  ) as TypedChartComponent<T>;\n}\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController);\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n);\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n);\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n);\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n);\n"]},"metadata":{},"sourceType":"module"}