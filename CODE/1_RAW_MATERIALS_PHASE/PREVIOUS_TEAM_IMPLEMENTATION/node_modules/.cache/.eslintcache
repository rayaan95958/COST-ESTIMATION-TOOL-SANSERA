[{"C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\index.js":"1","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\App.js":"2","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\Sidebar.jsx":"3","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\MainDash\\MainDash.jsx":"4","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\Breakdown\\Breakdown.jsx":"5","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\Input\\Input.jsx":"6","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\RigtSide\\RightSide.jsx":"7","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\ParttoRM\\ParttoRM.jsx":"8","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\Orders\\Orders.jsx":"9","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\History\\History.jsx":"10","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\Data\\Data.js":"11","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\Breakdown\\GradioEmbed.jsx":"12","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\Cards\\Cards.jsx":"13","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\Table\\Table.jsx":"14","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\Updates\\Updates.jsx":"15","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\CustomerReview\\CustomerReview.jsx":"16","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\Card\\Card.jsx":"17"},{"size":379,"mtime":1742732686067,"results":"18","hashOfConfig":"19"},{"size":2032,"mtime":1742732685893,"results":"20","hashOfConfig":"19"},{"size":1995,"mtime":1742732686049,"results":"21","hashOfConfig":"19"},{"size":308,"mtime":1742732686041,"results":"22","hashOfConfig":"19"},{"size":280,"mtime":1742732686028,"results":"23","hashOfConfig":"19"},{"size":24465,"mtime":1742732686040,"results":"24","hashOfConfig":"19"},{"size":449,"mtime":1742732686048,"results":"25","hashOfConfig":"19"},{"size":5645,"mtime":1742732686044,"results":"26","hashOfConfig":"19"},{"size":1439,"mtime":1742732686042,"results":"27","hashOfConfig":"19"},{"size":2223,"mtime":1742732686036,"results":"28","hashOfConfig":"19"},{"size":3136,"mtime":1742732685895,"results":"29","hashOfConfig":"19"},{"size":893,"mtime":1742732686029,"results":"30","hashOfConfig":"19"},{"size":640,"mtime":1742732686033,"results":"31","hashOfConfig":"19"},{"size":2809,"mtime":1742732686050,"results":"32","hashOfConfig":"19"},{"size":671,"mtime":1742732686052,"results":"33","hashOfConfig":"19"},{"size":5044,"mtime":1742732686034,"results":"34","hashOfConfig":"19"},{"size":3769,"mtime":1742732686031,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ywhit9",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},"C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\index.js",[],[],"C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\App.js",[],[],"C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\Sidebar.jsx",["92","93","94","95","96"],[],"// src/components/Sidebar/Sidebar.jsx\r\nimport React, { useState } from \"react\";\r\nimport \"./Sidebar.css\";\r\nimport Logo from \"../imgs/logo.png\";\r\nimport { UilSignOutAlt } from \"@iconscout/react-unicons\";\r\nimport { SidebarData } from \"../Data/Data\";\r\nimport { UilBars } from \"@iconscout/react-unicons\";\r\nimport { motion } from \"framer-motion\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// Import icons correctly\r\nimport { UilEstate, UilChart, UilPackage, UilMoneyWithdrawal, UilClipboardAlt } from \"@iconscout/react-unicons\";\r\n\r\nconst Sidebar = () => {\r\n  const [selected, setSelected] = useState(0);\r\n  const [expanded, setExpaned] = useState(true);\r\n  const navigate = useNavigate();\r\n\r\n  const sidebarVariants = {\r\n    true: { left: '0' },\r\n    false: { left: '-60%' }\r\n  };\r\n\r\n  const handleMenuItemClick = (index, path) => {\r\n    setSelected(index);\r\n    if (path) {\r\n      navigate(path);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"bars\" style={expanded ? { left: '60%' } : { left: '5%' }} onClick={() => setExpaned(!expanded)}>\r\n        <UilBars />\r\n      </div>\r\n      <motion.div className='sidebar'\r\n        variants={sidebarVariants}\r\n        animate={window.innerWidth <= 768 ? `${expanded}` : ''}\r\n      >\r\n        {/* logo */}\r\n        <div className=\"logo\">\r\n          <img src={Logo} alt=\"logo\" />\r\n          <span>Co<span>st</span>ing</span>\r\n        </div>\r\n\r\n        <div className=\"menu\">\r\n          {SidebarData.map((item, index) => (\r\n            <div\r\n              className={selected === index ? \"menuItem active\" : \"menuItem\"}\r\n              key={index}\r\n              onClick={() => handleMenuItemClick(index, item.path)}\r\n            >\r\n              <item.icon />\r\n              <span>{item.heading}</span>\r\n            </div>\r\n          ))}\r\n          {/* signoutIcon */}\r\n          <div className=\"menuItem\">\r\n            <UilSignOutAlt />\r\n          </div>\r\n        </div>\r\n      </motion.div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\MainDash\\MainDash.jsx",[],[],"C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\Breakdown\\Breakdown.jsx",[],[],"C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\Input\\Input.jsx",["97","98","99","100","101"],[],"import React, { useState, useEffect } from \"react\";   \r\nimport axios from \"axios\"; // Import axios for making API calls\r\nimport { Line } from \"react-chartjs-2\";  // Import Line chart from react-chartjs-2\r\nimport { Chart as ChartJS } from \"chart.js/auto\";\r\nimport \"./Input.css\";\r\nimport { color } from \"chart.js/helpers\";\r\n\r\n// Sample data structure based on the provided Excel sheet\r\nconst materialAlloyTemperDensity = {\r\n  AL: {\r\n    alloys: {\r\n      2024: [\"T0\",\"T3\", \"T351\",\"T3511\",\"T4\"],\r\n      2124: [\"T851\"],\r\n      6061: [\"T4\",\"T0\",\"T6\", \"T651\",\"T6511\",\"T652\"],\r\n      7050: [\"T7451\",\"T7651\"],\r\n      7075: [\"T6\",\"T0\",\"T76\",\"T651\",\"T7351\",\"T73511\"],\r\n      7475: [\"T7351\"],\r\n    },\r\n    density: 2.7, // Example density for Aluminum in kg/m³\r\n  },\r\n  SS: {\r\n    alloys: {\r\n      301: [\"A\", \"B\"],\r\n      303: [\"A\", \"B\"],\r\n      \"303SE\": [\"A\", \"B\"],\r\n      304: [\"A\", \"B\"],\r\n      \"304L\": [\"A\", \"B\"],\r\n      316: [\"A\", \"B\"],\r\n      \"316L\": [\"A\", \"B\"],\r\n      321: [\"A\", \"B\"],\r\n      \"440C\": [\"A\", \"B\"],\r\n      \"13-8 MO\": [\"A\", \"B\"],\r\n      \"15-5 PH\": [\"A\", \"B\"],\r\n      \"17-A PH\": [\"A\", \"B\"],\r\n      4130: [\"A\", \"B\"],\r\n      4340: [\"ANNEALED\", \"B\"],\r\n    },\r\n    density: 7.8, // Example density for Steel in kg/m³\r\n  },\r\n  TI: {\r\n    alloys: {\r\n      \"Ti-6AL-4V\": [\"H1000\", \"H1150\"],\r\n    },\r\n    density: 4.5, // Example density for Titanium in kg/m³\r\n  },\r\n  // Add other materials, alloys, and densities here...\r\n};\r\n\r\nconst Input = ({ predictedRM, selectedForm }) => {\r\n  const [formData, setFormData] = useState({\r\n    length: predictedRM?.rmLength || \"\",\r\n    width: predictedRM?.rmWidth || \"\",\r\n    thickness: predictedRM?.rmThickness || \"\",\r\n    diameter: selectedForm === \"RND\" ? predictedRM?.rmWidth || \"\" : \"\",\r\n    form: selectedForm || \"\",\r\n    material: \"\",\r\n    alloy: \"\",\r\n    temper: \"\",\r\n    density: \"\",\r\n    volume: \"\",\r\n    weight: \"\",\r\n    quantity: \"\",\r\n    predictedPrice: \"\",\r\n    partPrice: \"\",\r\n    netPrice: \"\",\r\n    netValue: \"\",\r\n  });\r\n  const [selectedPrice, setSelectedPrice] = useState(null);\r\n  const [isRecalculated, setisRecalculated] = useState(false); // Flag to control display of calculated values\r\n  const [alloys, setAlloys] = useState([]);\r\n  const [tempers, setTempers] = useState([]);\r\n  const [importType, setImportType] = useState('Domestic');\r\n  const [freightCharge, setFreightCharge] = useState(0);\r\n  const [rejectionCharge, setRejectionCharge] = useState(0);\r\n\r\n  const rejectionRates = {\r\n    AL: 0.02,  // Aluminium\r\n    SS: 0.025, // Steel & PH\r\n    Ti: 0.03   // Titanium\r\n  };\r\n  const [graphData, setGraphData] = useState({\r\n    labels: [],\r\n    datasets: [{\r\n      label: 'Price vs Quantity',\r\n      data: [],\r\n      borderColor: 'rgba(75,192,192,1)',\r\n      borderWidth: 2,\r\n      fill: false,\r\n    }],\r\n  });\r\n  const [RecalculatedValues, setRecalculatedValues] = useState({\r\n    partPrice: 0,\r\n    netPrice: 0,\r\n    netValue: 0,\r\n  });\r\n  const handleRecalculate = () => {\r\n    const { quantity, weight } = formData;\r\n\r\n    // Perform calculations\r\n    const partPrice = (selectedPrice * formData.weight).toFixed(2);\r\n    const netPrice = ((selectedPrice * formData.weight) + parseFloat(freightCharge) + parseFloat(rejectionCharge)).toFixed(2);\r\n    const netValue = (netPrice * formData.quantity).toFixed(2);\r\n\r\n    setRecalculatedValues({\r\n      partPrice,\r\n      netPrice,\r\n      netValue,\r\n    });\r\n    setisRecalculated(true); // Set flag to true\r\n  };\r\n  useEffect(() => {\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      length: predictedRM?.rmLength || \"\",\r\n      width: predictedRM?.rmWidth || \"\",\r\n      thickness: predictedRM?.rmThickness || \"\",\r\n      diameter: selectedForm === \"RND\" ? predictedRM?.rmWidth || \"\" : \"\",\r\n      form: selectedForm,\r\n    }));\r\n  }, [predictedRM, selectedForm]);\r\n \r\n  useEffect(() => {\r\n    if (formData.material) {\r\n      const selectedMaterial = materialAlloyTemperDensity[formData.material];\r\n      setAlloys(Object.keys(selectedMaterial.alloys));\r\n      setFormData((prevData) => ({\r\n        ...prevData,\r\n        density: selectedMaterial.density,\r\n        alloy: \"\",\r\n        temper: \"\",\r\n      }));\r\n      setTempers([]);\r\n    }\r\n  }, [formData.material]);\r\n\r\n  useEffect(() => {\r\n    if (formData.material && formData.alloy) {\r\n      const selectedTempers =\r\n        materialAlloyTemperDensity[formData.material].alloys[formData.alloy];\r\n      setTempers(selectedTempers);\r\n      setFormData((prevData) => ({ ...prevData, temper: \"\" }));\r\n    }\r\n  }, [formData.alloy]);\r\n\r\n  const calculateFreightPercentage = (weight) => {\r\n    if (weight >= 10000) return { Domestic: 0.02, Import: 0.05 };\r\n    if (weight >= 1000) return { Domestic: (2 + Math.floor((10000 - weight) / 1000)) / 100, Import: (5 + Math.floor((10000 - weight) / 1000)) / 100 };\r\n    if (weight >= 100) return { Domestic: (11 + Math.floor((1000 - weight) / 100)) / 100, Import: (14 + Math.floor((1000 - weight) / 100)) / 100 };\r\n    if (weight >= 10) return { Domestic: (20 + Math.floor((100 - weight) / 10)) / 100, Import: (23 + Math.floor((100 - weight) / 10)) / 100 };\r\n    return { Domestic: (29 + (10 - weight)) / 100, Import: (32 + (10 - weight)) / 100 };\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [name]: value,\r\n    }));\r\n\r\n    if (name === \"material\") {\r\n      const materialKey = value;\r\n      const rejectionRate = rejectionRates[materialKey] || 0;\r\n      setRejectionCharge((formData.predictedPrice * rejectionRate).toFixed(2));\r\n    }\r\n\r\n    if (name === \"weight\") {\r\n      const weight = Number(value);\r\n      const freightPercentage = calculateFreightPercentage(weight);\r\n      setFreightCharge((formData.predictedPrice * freightPercentage[importType]).toFixed(2));\r\n    }\r\n  };\r\n  const handleImportTypeChange = (e) => {\r\n    setImportType(e.target.value);\r\n    const freightPercentage = calculateFreightPercentage(formData.weight);\r\n    setFreightCharge((formData.predictedPrice * freightPercentage[e.target.value]).toFixed(2));\r\n  };\r\n\r\n  const calculateWeightAndVolume = () => { \r\n    let volume;\r\n    if (formData.form === \"RND\") {\r\n      const radius = formData.diameter / 2;\r\n      volume = Math.PI * Math.pow(radius, 2) * formData.length;\r\n    } else if (formData.form === \"TUBE\") {\r\n      const outerRadius = formData.outerDiameter / 2;\r\n      const innerRadius = formData.innerDiameter / 2;\r\n      volume = Math.PI * (Math.pow(outerRadius, 2) - Math.pow(innerRadius, 2)) * formData.length;\r\n    } else {\r\n      volume = formData.length * formData.width * formData.thickness;\r\n    }\r\n\r\n    volume = volume * 16.387064;\r\n    const weight = (volume * formData.density) / 1000;\r\n\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      volume: volume.toFixed(6),\r\n      weight: weight.toFixed(2),\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.post(\"http://127.0.0.1:5000/predict_price\", formData, {\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      });\r\n      const { prices_by_quantity } = response.data;\r\n      const { quantity_range } = response.data;\r\n      setGraphData({\r\n        labels: quantity_range,\r\n        datasets: [\r\n          {\r\n            label: 'Price vs Quantity',\r\n            font: {\r\n              size: 16, // Adjust font size as needed\r\n              color: \"red\"\r\n            },\r\n            data: prices_by_quantity,\r\n            borderColor: 'rgba(75,192,192,1)',\r\n            borderWidth: 2,\r\n            fill: true,\r\n          },\r\n        ],\r\n      });\r\n      const predictedPrice = parseFloat(response.data.predicted_price);\r\n      const freightPercentage = calculateFreightPercentage(formData.weight)[importType];\r\n      const rejectionRate = rejectionRates[formData.material] || 0;\r\n      const freightCharge = (predictedPrice * freightPercentage).toFixed(2);\r\n      const rejectionCharge = (predictedPrice * rejectionRate).toFixed(2);\r\n      const partPrice = (predictedPrice * formData.weight).toFixed(2);\r\n      const netPrice = ((predictedPrice * formData.weight) + parseFloat(freightCharge) + parseFloat(rejectionCharge)).toFixed(2);\r\n      const netValue = (netPrice * formData.quantity).toFixed(2);\r\n\r\n      setFormData((prevData) => ({\r\n        ...prevData,\r\n        predictedPrice: predictedPrice.toFixed(2),\r\n        partPrice,\r\n        netPrice,\r\n        netValue,\r\n      }));\r\n      setFreightCharge(freightCharge);\r\n      setRejectionCharge(rejectionCharge);\r\n\r\n      // Update graph data for price vs quantity\r\n      const newGraphData = { ...graphData };\r\n      newGraphData.labels = quantity_range; // Use the quantity range as labels\r\n      newGraphData.datasets[0].data = prices_by_quantity; // Use the predicted prices as data\r\n      setGraphData(newGraphData);\r\n\r\n      await axios.post(\"http://localhost:3000/update-sheet\", { ...formData, predictedPrice, netPrice, netValue,freightCharge,rejectionCharge }, {\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error(\"Error in predicting price or updating Google Sheet:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Input\" style={{ display: \"flex\" }}>\r\n      <div style={{ width: \"50%\", padding: \"10px\" }}>\r\n        <form className=\"form-container\" onSubmit={handleSubmit}>\r\n        <div className=\"form-scroll\">\r\n        <div className=\"form-group\">\r\n            <label htmlFor=\"importType\">Import Type</label>\r\n            <select\r\n              id=\"importType\"\r\n              value={importType}\r\n              onChange={handleImportTypeChange}\r\n            >\r\n              <option value=\"Domestic\">Domestic</option>\r\n              <option value=\"Import\">Import</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"form\">Form</label>\r\n            <select id=\"form\" name=\"form\" value={formData.form} onChange={handleChange}>\r\n              <option value=\"\">Select form</option>\r\n              <option value=\"RND\">RND</option>\r\n              <option value=\"FLAT\">FLAT</option>\r\n              <option value=\"BAR\">BAR</option>\r\n              <option value=\"EXT\">EXT</option>\r\n              <option value=\"PLATE\">PLATE</option>\r\n              <option value=\"TUBE\">TUBE</option>\r\n              <option value=\"SHEET\">SHEET</option>\r\n              <option value=\"FORG\">FORG</option>\r\n            </select>\r\n          </div>\r\n\r\n          {/* Render dimensions based on form type */}\r\n          {formData.form === \"RND\" ? (\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"diameter\">Diameter (in)</label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                id=\"diameter\"\r\n                name=\"diameter\"\r\n                value={formData.diameter}\r\n                onChange={handleChange}\r\n                placeholder=\"Enter diameter\"\r\n              />\r\n              <label htmlFor=\"length\">Length (in)</label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                id=\"length\"\r\n                name=\"length\"\r\n                value={formData.length}\r\n                onChange={handleChange}\r\n                placeholder=\"Enter length\"\r\n              />\r\n            </div>\r\n          ) : formData.form === \"TUBE\" ? (\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"outerDiameter\">Outer Diameter (in)</label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                id=\"outerDiameter\"\r\n                name=\"outerDiameter\"\r\n                value={formData.outerDiameter}\r\n                onChange={handleChange}\r\n                placeholder=\"Enter outer diameter\"\r\n              />\r\n              <label htmlFor=\"innerDiameter\">Inner Diameter (in)</label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                id=\"innerDiameter\"\r\n                name=\"innerDiameter\"\r\n                value={formData.innerDiameter}\r\n                onChange={handleChange}\r\n                placeholder=\"Enter inner diameter\"\r\n              />\r\n              <label htmlFor=\"length\">Length (in)</label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                id=\"length\"\r\n                name=\"length\"\r\n                value={formData.length}\r\n                onChange={handleChange}\r\n                placeholder=\"Enter length\"\r\n              />\r\n            </div>\r\n          ) : (\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"length\">Length (in)</label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                id=\"length\"\r\n                name=\"length\"\r\n                value={formData.length}\r\n                onChange={handleChange}\r\n                placeholder=\"Enter length\"\r\n              />\r\n              <label htmlFor=\"width\">Width (in)</label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                id=\"width\"\r\n                name=\"width\"\r\n                value={formData.width}\r\n                onChange={handleChange}\r\n                placeholder=\"Enter width\"\r\n              />\r\n              <label htmlFor=\"thickness\">Thickness (in)</label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                id=\"thickness\"\r\n                name=\"thickness\"\r\n                value={formData.thickness}\r\n                onChange={handleChange}\r\n                placeholder=\"Enter thickness\"\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"material\">Material</label>\r\n            <select\r\n              id=\"material\"\r\n              name=\"material\"\r\n              value={formData.material}\r\n              onChange={handleChange}\r\n            >\r\n              <option value=\"\">Select Material</option>\r\n              {Object.keys(materialAlloyTemperDensity).map((material) => (\r\n                <option key={material} value={material}>\r\n                  {material}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          {/* Alloy Dropdown */}\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"alloy\">Alloy</label>\r\n            <select\r\n              id=\"alloy\"\r\n              name=\"alloy\"\r\n              value={formData.alloy}\r\n              onChange={handleChange}\r\n              disabled={!alloys.length}\r\n            >\r\n              <option value=\"\">Select Alloy</option>\r\n              {alloys.map((alloy) => (\r\n                <option key={alloy} value={alloy}>\r\n                  {alloy}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          {/* Temper Dropdown */}\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"temper\">Temper</label>\r\n            <select\r\n              id=\"temper\"\r\n              name=\"temper\"\r\n              value={formData.temper}\r\n              onChange={handleChange}\r\n              disabled={!tempers.length}\r\n            >\r\n              <option value=\"\">Select Temper</option>\r\n              {tempers.map((temper) => (\r\n                <option key={temper} value={temper}>\r\n                  {temper}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          {/* Spec Dropdown */}\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"spec\">Spec</label>\r\n            <select\r\n              id=\"spec\"\r\n              name=\"spec\"\r\n              value={formData.spec}\r\n              onChange={handleChange}\r\n            >\r\n              <option value=\"\">Select a Spec</option>\r\n              <option value=\"ABS 5052\">ABS 5052</option>\r\n              <option value=\"ABS 5324\">ABS 5324</option>\r\n              <option value=\"ABS 5455\">ABS 5455</option>\r\n              <option value=\"AMS 4027\">AMS 4027</option>\r\n              <option value=\"AMS 4050\">AMS 4050</option>\r\n              <option value=\"AMS 4078\">AMS 4078</option>\r\n              <option value=\"AMS 4117\">AMS 4117</option>\r\n              <option value=\"AMS 4124\">AMS 4124</option>\r\n              <option value=\"AMS 4342\">AMS 4342</option>\r\n              <option value=\"AMS 4534\">AMS 4534</option>\r\n              <option value=\"AMS 4596\">AMS 4596</option>\r\n              <option value=\"AMS 4625\">AMS 4625</option>\r\n              <option value=\"AMS 4640\">AMS 4640</option>\r\n              <option value=\"AMS 4880\">AMS 4880</option>\r\n              <option value=\"AMS 4911\">AMS 4911</option>\r\n              <option value=\"AMS 4928\">AMS 4928</option>\r\n              <option value=\"AMS 5622\">AMS 5622</option>\r\n              <option value=\"AMS 5629\">AMS 5629</option>\r\n              <option value=\"AMS 5630\">AMS 5630</option>\r\n              <option value=\"AMS 5639\">AMS 5639</option>\r\n              <option value=\"AMS 5640\">AMS 5640</option>\r\n              <option value=\"AMS 5643\">AMS 5643</option>\r\n              <option value=\"AMS 5647\">AMS 5647</option>\r\n              <option value=\"AMS 5659\">AMS 5659</option>\r\n              <option value=\"AMS 5848\">AMS 5848</option>\r\n              <option value=\"AMS 6345\">AMS 6345</option>\r\n              <option value=\"AMS 6346\">AMS 6346</option>\r\n              <option value=\"AMS 6348\">AMS 6348</option>\r\n              <option value=\"AMS 6414\">AMS 6414</option>\r\n              <option value=\"ASNA 3406\">ASNA 3406</option>\r\n              <option value=\"ASTM A276\">ASTM A276</option>\r\n              <option value=\"ASTM A479\">ASTM A479</option>\r\n              <option value=\"ASTM A582\">ASTM A582</option>\r\n              <option value=\"ASTM B209\">ASTM B209</option>\r\n              <option value=\"ASTM B211\">ASTM B211</option>\r\n              <option value=\"ASTM B221\">ASTM B221</option>\r\n              <option value=\"ASTM D6778\">ASTM D6778</option>\r\n              <option value=\"BMS 7-122\">BMS 7-122</option>\r\n              <option value=\"BMS 7-214\">BMS 7-214</option>\r\n              <option value=\"BMS 7-240\">BMS 7-240</option>\r\n              <option value=\"BMS 7-26\">BMS 7-26</option>\r\n              <option value=\"BMS 7-323\">BMS 7-323</option>\r\n              <option value=\"BMS 7-323 TY1\">BMS 7-323 TY1</option>\r\n              <option value=\"BMS 7-323 TYIII\">BMS 7-323 TYIII</option>\r\n              <option value=\"BMS7-371\">BMS7-371</option>\r\n              <option value=\"MIL-T-9047\">MIL-T-9047</option>\r\n              <option value=\"AMS-QQ-A-200/3\">AMS-QQ-A-200/3</option>\r\n              <option value=\"AMS-QQ-A-200/8\">AMS-QQ-A-200/8</option>\r\n              <option value=\"AMS-QQ-A-200/11\">AMS-QQ-A-200/11</option>\r\n              <option value=\"AMS-QQ-A-225/6\">AMS-QQ-A-225/6</option>\r\n              <option value=\"AMS-QQ-A-225/8\">AMS-QQ-A-225/8</option>\r\n              <option value=\"AMS-QQ-A-225/9\">AMS-QQ-A-225/9</option>\r\n              <option value=\"AMS-QQ-A-250/4\">AMS-QQ-A-250/4</option>\r\n              <option value=\"AMS-QQ-A-250/5\">AMS-QQ-A-250/5</option>\r\n              <option value=\"AMS-QQ-A-250/11\">AMS-QQ-A-250/11</option>\r\n              <option value=\"AMS-QQ-A-250/12\">AMS-QQ-A-250/12</option>\r\n              <option value=\"AMS-QQ-A-250/30\">AMS-QQ-A-250/30</option>\r\n              <option value=\"AMS-QQ-S-763\">AMS-QQ-S-763</option>\r\n            </select>\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"quantity\">Quantity</label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"quantity\"\r\n              name=\"quantity\"\r\n              value={formData.quantity}\r\n              onChange={handleChange}\r\n              placeholder=\"Enter quantity\"\r\n            />\r\n          </div>\r\n\r\n          {/* Display calculated volume, weight, and predicted price */}\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"volume\">Volume (cm³)</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"volume\"\r\n              name=\"volume\"\r\n              value={formData.volume}\r\n              readOnly\r\n              placeholder=\"Calculated volume\"\r\n            />\r\n            <label htmlFor=\"weight\">Weight (kg)</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"weight\"\r\n              name=\"weight\"\r\n              value={formData.weight}\r\n              readOnly\r\n              placeholder=\"Calculated weight\"\r\n            />\r\n\r\n            <label htmlFor=\"predictedPrice\">Predicted Price per kg</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"predictedPrice\"\r\n              name=\"predictedPrice\"\r\n              value={`$${formData.predictedPrice}`}\r\n              readOnly\r\n              placeholder=\"Predicted price\"\r\n            />\r\n          </div>\r\n\r\n          {/* Freight and Rejection Charges */}\r\n          <div className=\"form-group\">\r\n            <label>Freight Charge:</label>\r\n            <input type=\"text\" readOnly value={`$${freightCharge}`} />\r\n\r\n            <label>Rejection Charge:</label>\r\n            <input type=\"text\" readOnly value={`$${rejectionCharge}`} />\r\n          </div>\r\n\r\n          {/* Net Price and Net Value */}\r\n          <div className=\"form-group\">\r\n            <label><b>Part Price:</b></label>\r\n            <div id=\"partPrice\">${formData.partPrice}</div>\r\n\r\n            <label><b>Net Price:</b></label>\r\n            <div id=\"netPrice\">${formData.netPrice}</div>\r\n\r\n            <label><b>Net Value:</b></label>\r\n            <div id=\"netValue\">${formData.netValue}</div>\r\n          </div>\r\n\r\n          <button type=\"button\" onClick={calculateWeightAndVolume}>\r\n            Calculate Weight and Volume\r\n          </button>\r\n          <button type=\"submit\">Predict Price</button>\r\n        </div>\r\n      </form>\r\n      </div>\r\n      {/* Graph */}\r\n      <div className=\"graph-container\">\r\n      <Line\r\n          data={graphData}\r\n          options={{\r\n            responsive: true,\r\n            scales: {\r\n              x: {\r\n                title: {\r\n                  display: true,\r\n                  text: 'Quantity',\r\n                  font: {\r\n                    size: 16,},\r\n                    color: \"black\",\r\n                },\r\n                ticks: {\r\n                  color: \"black\", // X-axis label color\r\n                },\r\n              },\r\n              y: {\r\n                title: {\r\n                  display: true,\r\n                  text: 'Price',\r\n                  font: {\r\n                    size: 16,},\r\n                    color: \"black\",\r\n                  },\r\n                ticks: {\r\n                  color: \"black\", // X-axis label color\r\n                },\r\n                },\r\n            },\r\n            plugins: {\r\n              title: {\r\n                display: true,\r\n                text: 'Price vs Quantity',\r\n                color: \"black\",\r\n                font: {\r\n                  size: 20,\r\n                },\r\n              },\r\n            },\r\n            onClick: (event, chartElement) => {\r\n              if (chartElement && chartElement.length > 0) {\r\n                const clickedIndex = chartElement[0].index; // Index of clicked data point\r\n                const datasetIndex = chartElement[0].datasetIndex; // Dataset index\r\n                const newPrice =\r\n                  graphData.datasets[datasetIndex].data[clickedIndex]; // Retrieve data value\r\n        \r\n                const roundedPrice = parseFloat(newPrice).toFixed(2); // Round to 2 decimals\r\n        \r\n                setSelectedPrice(roundedPrice); // Update selected price\r\n                setisRecalculated(false); // Reset the flag when a new price is selected\r\n              } else {\r\n                console.warn('No data point clicked.');\r\n              }\r\n            },\r\n          }}\r\n        />\r\n        <p>Selected Price: ${selectedPrice}</p> {/* Display the selected price */}\r\n          {/* Conditionally Display Calculated Results */}\r\n      {isRecalculated && (\r\n        <div>\r\n          <p>Recalculated Part Price: ${RecalculatedValues.partPrice}</p>\r\n          <p>Recalculated Net Price: ${RecalculatedValues.netPrice}</p>\r\n          <p>Recalculated Net Value: ${RecalculatedValues.netValue}</p>\r\n        </div>\r\n      )}\r\n       <button className=\"recalculate-button\" onClick={handleRecalculate}>Recalculate Price</button>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\nexport default Input;\r\n\r\n\r\n","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\RigtSide\\RightSide.jsx",[],[],"C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\ParttoRM\\ParttoRM.jsx",[],[],"C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\Orders\\Orders.jsx",[],[],"C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\History\\History.jsx",[],[],"C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\Data\\Data.js",["102","103"],[],"// Sidebar imports\r\nimport {\r\n  UilEstate,\r\n  UilClipboardAlt,\r\n  UilUsersAlt,\r\n  UilPackage,\r\n  UilChart,\r\n  UilSignOutAlt,\r\n} from \"@iconscout/react-unicons\";\r\n\r\n// Analytics Cards imports\r\nimport { UilUsdSquare, UilMoneyWithdrawal } from \"@iconscout/react-unicons\";\r\nimport { keyboard } from \"@testing-library/user-event/dist/keyboard\";\r\n\r\n// Recent Card Imports\r\nimport img1 from \"../imgs/img1.png\";\r\nimport img2 from \"../imgs/img2.png\";\r\nimport img3 from \"../imgs/img3.png\";\r\n\r\n// Sidebar Data\r\nexport const SidebarData = [\r\n  {\r\n    icon: UilEstate,\r\n    heading: \"Dashboard\",\r\n    path: \"/\"\r\n  },\r\n  {\r\n    icon: UilChart,\r\n    heading: 'Breakdown',\r\n    path: \"/breakdown\"\r\n  },\r\n  {\r\n    icon: UilPackage,\r\n    heading: \"History\",\r\n     path: \"/history\"\r\n  },\r\n  {\r\n    icon: UilMoneyWithdrawal,\r\n    heading: \"XAI\",\r\n    path: \"/orders\"\r\n  },\r\n  {\r\n    icon: UilUsersAlt,\r\n    heading: \"Part to RM\",\r\n    path: \"/ParttoRM\"\r\n  },\r\n  {\r\n    icon: UilClipboardAlt,\r\n    heading: 'Input',\r\n    path: \"/Input\"\r\n  }\r\n\r\n];\r\n\r\n// Analytics Cards Data\r\nexport const cardsData = [\r\n  {\r\n    title: \"Raw Material\",\r\n    color: {\r\n      backGround: \"linear-gradient(180deg, #bb67ff 0%, #c484f3 100%)\",\r\n      boxShadow: \"0px 10px 20px 0px #e0c6f5\",\r\n    },\r\n    barValue: 70,\r\n    value: \"25,970\",\r\n    png: UilUsdSquare,\r\n    series: [\r\n      {\r\n        name: \"Raw Material\",\r\n        data: [31, 40, 28, 51, 42, 109, 100],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    title: \"Special Processes\",\r\n    color: {\r\n      backGround: \"linear-gradient(180deg, #FF919D 0%, #FC929D 100%)\",\r\n      boxShadow: \"0px 10px 20px 0px #FDC0C7\",\r\n    },\r\n    barValue: 80,\r\n    value: \"14,270\",\r\n    png: UilUsdSquare,\r\n    series: [\r\n      {\r\n        name: \"Special Processes\",\r\n        data: [10, 100, 50, 70, 80, 30, 40],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    title: \"Cutting Tools\",\r\n    color: {\r\n      backGround:\r\n      \"linear-gradient(180deg, #7FE183 0%, #7FE183 100%)\",\r\n      boxShadow: \"0px 10px 20px 0px #F9D59B\",\r\n    },\r\n    barValue: 60,\r\n    value: \"4,270\",\r\n    png: UilUsdSquare,\r\n    series: [\r\n      {\r\n        name: \"Cutting Tools\",\r\n        data: [10, 25, 15, 30, 12, 15, 20],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    title: \"Assembly\",\r\n    color: {\r\n      backGround:\r\n        \"linear-gradient(rgb(248, 212, 154) -146.42%, rgb(255 202 113) -46.42%)\",\r\n      boxShadow: \"0px 10px 20px 0px #F9D59B\",\r\n    },\r\n    barValue: 60,\r\n    value: \"4,270\",\r\n    png: UilUsdSquare,\r\n    series: [\r\n      {\r\n        name: \"Assembly\",\r\n        data: [10, 25, 15, 30, 12, 15, 20],\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n// Recent Update Card Data\r\nexport const UpdatesData = [\r\n  {\r\n    img: img1,\r\n    name: \" Hindustan Aluminium Company\",\r\n    noti: \"has confirmed your order of 500kg of ALuminium - 17-4PH.\",\r\n    time: \"25 seconds ago\",\r\n  },\r\n  {\r\n    img: img2,\r\n    name: \"Jindal Stainless Limited\",\r\n    noti: \"has confirmed your order of 250 kg of Stainless Steel.\",\r\n    time: \"30 minutes ago\",\r\n  },\r\n  {\r\n    img: img3,\r\n    name: \"Dhanwant Metal Corporation\",\r\n    noti: \"has confirmed your order of 250 kg of Ti AMS4911.\",\r\n    time: \"2 hours ago\",\r\n  },\r\n];\r\n","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\Breakdown\\GradioEmbed.jsx",["104"],[],"import React, { useEffect, useRef } from 'react';\r\n\r\nconst GradioEmbed = () => {\r\n  const iframeRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const handleIframeLoad = () => {\r\n      if (iframeRef.current) {\r\n        iframeRef.current.style.height = `${iframeRef.current.contentWindow.document.body.scrollHeight}px`;\r\n      }\r\n    };\r\n\r\n    if (iframeRef.current) {\r\n      iframeRef.current.addEventListener('load', handleIframeLoad);\r\n    }\r\n\r\n    return () => {\r\n      if (iframeRef.current) {\r\n        iframeRef.current.removeEventListener('load', handleIframeLoad);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"gradio-embed\">\r\n      <iframe\r\n        ref={iframeRef}\r\n        src=\"http://127.0.0.1:7860\"\r\n        width=\"100%\"\r\n        height=\"500px\"\r\n        frameBorder=\"0\"\r\n        title=\"Gradio Interface\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GradioEmbed;","C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\Cards\\Cards.jsx",[],[],"C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\Table\\Table.jsx",[],[],"C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\Updates\\Updates.jsx",[],[],"C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\CustomerReview\\CustomerReview.jsx",[],[],"C:\\Users\\satar\\OneDrive\\Desktop\\SANSERA PROJECT\\CODE\\1_RAW_MATERIALS_PHASE\\PREVIOUS_TEAM_IMPLEMENTATION\\Cost-Estimation-for-Aerospace\\src\\components\\Card\\Card.jsx",["105"],[],"// src/components/Card/Card.jsx\r\nimport React, { useState } from \"react\";\r\nimport \"./Card.css\";\r\nimport { CircularProgressbar } from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\nimport { motion, AnimateSharedLayout } from \"framer-motion\";\r\nimport { UilTimes } from \"@iconscout/react-unicons\";\r\nimport Chart from \"react-apexcharts\";\r\nimport CustomerReview from \"../CustomerReview/CustomerReview\";\r\n// parent Card\r\n\r\nconst Card = (props) => {\r\n  const [expanded, setExpanded] = useState(false);\r\n  return (\r\n    <AnimateSharedLayout>\r\n      {expanded ? (\r\n        <ExpandedCard param={props} setExpanded={() => setExpanded(false)} showDropdowns={props.title === \"CustomerReview\"} />\r\n      ) : (\r\n        <CompactCard param={props} setExpanded={() => setExpanded(true)} />\r\n      )}\r\n    </AnimateSharedLayout>\r\n  );\r\n};\r\n\r\n// Compact Card\r\nfunction CompactCard({ param, setExpanded }) {\r\n  const Png = param.png;\r\n  return (\r\n    <motion.div\r\n      className=\"CompactCard\"\r\n      style={{\r\n        background: param.color.backGround,\r\n        boxShadow: param.color.boxShadow,\r\n      }}\r\n      layoutId=\"expandableCard\"\r\n      onClick={setExpanded}\r\n    >\r\n      <div className=\"radialBar\">\r\n        <CircularProgressbar\r\n          value={param.barValue}\r\n          text={`${param.barValue}%`}\r\n        />\r\n        <span>{param.title}</span>\r\n      </div>\r\n      <div className=\"detail\">\r\n        <Png />\r\n        <span>${param.value}</span>\r\n        <span>Last 24 hours</span>\r\n      </div>\r\n    </motion.div>\r\n  );\r\n}\r\n\r\n// Expanded Card\r\nfunction ExpandedCard({ param, setExpanded, showDropdowns }) {\r\n  const data = {\r\n    options: {\r\n      chart: {\r\n        type: \"area\",\r\n        height: \"auto\",\r\n      },\r\n      dropShadow: {\r\n        enabled: false,\r\n        enabledOnSeries: undefined,\r\n        top: 0,\r\n        left: 0,\r\n        blur: 3,\r\n        color: \"#000\",\r\n        opacity: 0.35,\r\n      },\r\n      fill: {\r\n        colors: [\"#fff\"],\r\n        type: \"gradient\",\r\n      },\r\n      dataLabels: {\r\n        enabled: false,\r\n      },\r\n      stroke: {\r\n        curve: \"smooth\",\r\n        colors: [\"white\"],\r\n      },\r\n      tooltip: {\r\n        x: {\r\n          format: \"dd/MM/yy HH:mm\",\r\n        },\r\n      },\r\n      grid: {\r\n        show: true,\r\n      },\r\n      xaxis: {\r\n        type: \"datetime\",\r\n        categories: [\r\n          \"2018-09-19T00:00:00.000Z\",\r\n          \"2018-09-19T01:30:00.000Z\",\r\n          \"2018-09-19T02:30:00.000Z\",\r\n          \"2018-09-19T03:30:00.000Z\",\r\n          \"2018-09-19T04:30:00.000Z\",\r\n          \"2018-09-19T05:30:00.000Z\",\r\n          \"2018-09-19T06:30:00.000Z\",\r\n        ],\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      className=\"ExpandedCard\"\r\n      style={{\r\n        background: param.color.backGround,\r\n        boxShadow: param.color.boxShadow,\r\n      }}\r\n      layoutId=\"expandableCard\"\r\n    >\r\n      <div style={{ alignSelf: \"flex-end\", cursor: \"pointer\", color: \"white\" }}>\r\n        <UilTimes onClick={setExpanded} />\r\n      </div>\r\n      <span>{param.title}</span>\r\n      {showDropdowns && (\r\n        <div className=\"dropdowns\">\r\n          <select>\r\n            <option value=\"Material1\">Material1</option>\r\n            <option value=\"Material2\">Material2</option>\r\n            {/* Add more options as needed */}\r\n          </select>\r\n          <select>\r\n            <option value=\"Alloy1\">Alloy1</option>\r\n            <option value=\"Alloy2\">Alloy2</option>\r\n            {/* Add more options as needed */}\r\n          </select>\r\n        </div>\r\n      )}\r\n      <div className=\"chartContainer\">\r\n        <Chart options={data.options} series={param.series} type=\"area\" />\r\n      </div>\r\n      <span>Last 24 hours</span>\r\n    </motion.div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n",{"ruleId":"106","severity":1,"message":"107","line":12,"column":10,"nodeType":"108","messageId":"109","endLine":12,"endColumn":19},{"ruleId":"106","severity":1,"message":"110","line":12,"column":21,"nodeType":"108","messageId":"109","endLine":12,"endColumn":29},{"ruleId":"106","severity":1,"message":"111","line":12,"column":31,"nodeType":"108","messageId":"109","endLine":12,"endColumn":41},{"ruleId":"106","severity":1,"message":"112","line":12,"column":43,"nodeType":"108","messageId":"109","endLine":12,"endColumn":61},{"ruleId":"106","severity":1,"message":"113","line":12,"column":63,"nodeType":"108","messageId":"109","endLine":12,"endColumn":78},{"ruleId":"106","severity":1,"message":"114","line":4,"column":19,"nodeType":"108","messageId":"109","endLine":4,"endColumn":26},{"ruleId":"106","severity":1,"message":"115","line":6,"column":10,"nodeType":"108","messageId":"109","endLine":6,"endColumn":15},{"ruleId":"106","severity":1,"message":"116","line":97,"column":13,"nodeType":"108","messageId":"109","endLine":97,"endColumn":21},{"ruleId":"106","severity":1,"message":"117","line":97,"column":23,"nodeType":"108","messageId":"109","endLine":97,"endColumn":29},{"ruleId":"118","severity":1,"message":"119","line":143,"column":6,"nodeType":"120","endLine":143,"endColumn":22,"suggestions":"121"},{"ruleId":"106","severity":1,"message":"122","line":8,"column":3,"nodeType":"108","messageId":"109","endLine":8,"endColumn":16},{"ruleId":"106","severity":1,"message":"123","line":13,"column":10,"nodeType":"108","messageId":"109","endLine":13,"endColumn":18},{"ruleId":"118","severity":1,"message":"124","line":19,"column":19,"nodeType":"108","endLine":19,"endColumn":26},{"ruleId":"106","severity":1,"message":"125","line":9,"column":8,"nodeType":"108","messageId":"109","endLine":9,"endColumn":22},"no-unused-vars","'UilEstate' is defined but never used.","Identifier","unusedVar","'UilChart' is defined but never used.","'UilPackage' is defined but never used.","'UilMoneyWithdrawal' is defined but never used.","'UilClipboardAlt' is defined but never used.","'ChartJS' is defined but never used.","'color' is defined but never used.","'quantity' is assigned a value but never used.","'weight' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'formData.material'. Either include it or remove the dependency array.","ArrayExpression",["126"],"'UilSignOutAlt' is defined but never used.","'keyboard' is defined but never used.","The ref value 'iframeRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'iframeRef.current' to a variable inside the effect, and use that variable in the cleanup function.","'CustomerReview' is defined but never used.",{"desc":"127","fix":"128"},"Update the dependencies array to be: [formData.alloy, formData.material]",{"range":"129","text":"130"},[4483,4499],"[formData.alloy, formData.material]"]